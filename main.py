from flask import Flask, render_template, request, jsonify, redirect, url_for, session, flash
from werkzeug.security import generate_password_hash, check_password_hash
import sqlite3
import os
from datetime import datetime, timedelta
import hashlib
import secrets
import json
from functools import wraps
import threading
import time
import sqlite3
from apscheduler.schedulers.background import BackgroundScheduler
import atexit

# Utilisation de SQLite pour la persistance
REPLIT_DB_AVAILABLE = False
print("‚úÖ Utilisation de SQLite pour la persistance des donn√©es")

# Import du bot Telegram utilisateur uniquement
TELEGRAM_ENABLED = False
TELEGRAM_USER_BOT_ENABLED = False


app = Flask(__name__)
app.secret_key = secrets.token_hex(32)

# Configuration PWA
@app.route('/static/sw.js')
def service_worker():
    return app.send_static_file('sw.js'), 200, {'Content-Type': 'application/javascript'}

@app.route('/static/manifest.json')
def manifest():
    return app.send_static_file('manifest.json'), 200, {'Content-Type': 'application/json'}

@app.route('/static/offline.html')
def offline():
    return app.send_static_file('offline.html')

# Configuration avec persistance
if REPLIT_DB_AVAILABLE:
    # Utiliser un r√©pertoire persistant pour la base de donn√©es
    DATABASE = '/home/runner/.local/share/investment_platform.db'
    # S'assurer que le r√©pertoire existe
    os.makedirs(os.path.dirname(DATABASE), exist_ok=True)
    print(f"üìÇ Base de donn√©es persistante: {DATABASE}")
else:
    DATABASE = 'investment_platform.db'

UPLOAD_FOLDER = 'uploads'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# Database initialization
def init_db():
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()

    # Users table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            email TEXT UNIQUE NOT NULL,
            password_hash TEXT NOT NULL,
            first_name TEXT NOT NULL,
            last_name TEXT NOT NULL,
            wallet_address TEXT,
            balance REAL DEFAULT 0.0,
            pending_balance REAL DEFAULT 0.0,
            kyc_status TEXT DEFAULT 'pending',
            referral_code TEXT UNIQUE,
            referred_by TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            two_fa_enabled BOOLEAN DEFAULT 0,
            two_fa_secret TEXT,
            telegram_id INTEGER UNIQUE,
            last_login TIMESTAMP,
            failed_login_attempts INTEGER DEFAULT 0,
            account_locked BOOLEAN DEFAULT 0,
            locked_until TIMESTAMP
        )
    ''')

    

    # User Investments table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_investments (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            plan_id INTEGER NOT NULL,
            amount REAL NOT NULL,
            start_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            end_date TIMESTAMP,
            daily_profit REAL NOT NULL,
            total_earned REAL DEFAULT 0.0,
            is_active BOOLEAN DEFAULT 1,
            transaction_hash TEXT,
            FOREIGN KEY (user_id) REFERENCES users (id),
            FOREIGN KEY (plan_id) REFERENCES roi_plans (id)
        )
    ''')

    # Crowdfunding Projects table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS projects (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT NOT NULL,
            description TEXT NOT NULL,
            category TEXT NOT NULL,
            target_amount REAL NOT NULL,
            raised_amount REAL DEFAULT 0.0,
            expected_return REAL NOT NULL,
            duration_months INTEGER NOT NULL,
            min_investment REAL NOT NULL,
            max_investment REAL NOT NULL,
            status TEXT DEFAULT 'collecting',
            image_url TEXT,
            video_url TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            deadline TIMESTAMP
        )
    ''')

    # Project Investments table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS project_investments (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            project_id INTEGER NOT NULL,
            amount REAL NOT NULL,
            investment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            transaction_hash TEXT,
            FOREIGN KEY (user_id) REFERENCES users (id),
            FOREIGN KEY (project_id) REFERENCES projects (id)
        )
    ''')

    # Transactions table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS transactions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            type TEXT NOT NULL,
            amount REAL NOT NULL,
            status TEXT DEFAULT 'pending',
            transaction_hash TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')

def backup_critical_data():
    """Sauvegarder les donn√©es critiques dans Replit DB"""
    if not REPLIT_DB_AVAILABLE:
        return
    
    try:
        conn = get_db_connection()
        
        # Sauvegarder TOUS les investissements ROI (actifs et termin√©s)
        all_investments = conn.execute('''
            SELECT * FROM user_investments ORDER BY start_date DESC
        ''').fetchall()
        
        investments_data = []
        for inv in all_investments:
            investments_data.append(dict(inv))
        
        replit_db['all_investments_history'] = json.dumps(investments_data, default=str)
        
        # Sauvegarder TOUS les investissements staking (actifs et termin√©s)
        all_staking = conn.execute('''
            SELECT * FROM user_staking ORDER BY start_date DESC
        ''').fetchall()
        
        staking_data = []
        for stake in all_staking:
            staking_data.append(dict(stake))
        
        replit_db['all_staking_history'] = json.dumps(staking_data, default=str)
        
        # Sauvegarder TOUS les bots de trading (actifs et termin√©s)
        all_bots = conn.execute('''
            SELECT * FROM user_trading_bots ORDER BY start_date DESC
        ''').fetchall()
        
        bots_data = []
        for bot in all_bots:
            bots_data.append(dict(bot))
        
        replit_db['all_bots_history'] = json.dumps(bots_data, default=str)
        
        # Sauvegarder TOUS les copy trades (actifs et termin√©s)
        all_copy_trades = conn.execute('''
            SELECT * FROM user_copy_trading ORDER BY start_date DESC
        ''').fetchall()
        
        copy_trades_data = []
        for trade in all_copy_trades:
            copy_trades_data.append(dict(trade))
        
        replit_db['all_copy_trading_history'] = json.dumps(copy_trades_data, default=str)
        
        # Sauvegarder TOUS les investissements projets
        all_projects = conn.execute('''
            SELECT * FROM project_investments ORDER BY investment_date DESC
        ''').fetchall()
        
        projects_data = []
        for proj in all_projects:
            projects_data.append(dict(proj))
        
        replit_db['all_projects_history'] = json.dumps(projects_data, default=str)
        
        # Sauvegarder TOUTES les transactions
        all_transactions = conn.execute('''
            SELECT * FROM transactions ORDER BY created_at DESC
        ''').fetchall()
        
        transactions_data = []
        for trans in all_transactions:
            transactions_data.append(dict(trans))
        
        replit_db['all_transactions_history'] = json.dumps(transactions_data, default=str)
        
        # Sauvegarder les soldes utilisateurs
        users = conn.execute('SELECT id, email, balance, first_name, last_name FROM users').fetchall()
        users_data = []
        for user in users:
            users_data.append(dict(user))
        
        replit_db['user_balances'] = json.dumps(users_data, default=str)
        
        # Sauvegarder les plans pour restauration
        roi_plans = conn.execute('SELECT * FROM roi_plans').fetchall()
        roi_plans_data = []
        for plan in roi_plans:
            roi_plans_data.append(dict(plan))
        replit_db['roi_plans_backup'] = json.dumps(roi_plans_data, default=str)
        
        replit_db['last_backup'] = datetime.now().isoformat()
        conn.close()
        
        print("‚úÖ Sauvegarde compl√®te de l'historique effectu√©e")
        
    except Exception as e:
        print(f"‚ùå Erreur sauvegarde: {e}")

def restore_critical_data():
    """Restaurer les donn√©es critiques depuis Replit DB"""
    if not REPLIT_DB_AVAILABLE:
        return False
    
    try:
        # V√©rifier s'il y a une sauvegarde disponible
        if 'last_backup' not in replit_db:
            return False
        
        conn = get_db_connection()
        
        print("üîÑ Restauration de l'historique complet depuis la sauvegarde...")
        
        # Restaurer TOUS les investissements ROI
        if 'all_investments_history' in replit_db:
            investments_data = json.loads(replit_db['all_investments_history'])
            for inv in investments_data:
                try:
                    conn.execute('''
                        INSERT OR REPLACE INTO user_investments 
                        (id, user_id, plan_id, amount, start_date, end_date, daily_profit, total_earned, is_active, transaction_hash)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                    ''', (
                        inv.get('id'), inv.get('user_id'), inv.get('plan_id'), 
                        inv.get('amount'), inv.get('start_date'), inv.get('end_date'),
                        inv.get('daily_profit'), inv.get('total_earned', 0), 
                        inv.get('is_active', 1), inv.get('transaction_hash')
                    ))
                except Exception as e:
                    print(f"‚ö†Ô∏è Erreur restauration investissement {inv.get('id')}: {e}")
        
        # Restaurer TOUS les investissements staking
        if 'all_staking_history' in replit_db:
            staking_data = json.loads(replit_db['all_staking_history'])
            for stake in staking_data:
                try:
                    conn.execute('''
                        INSERT OR REPLACE INTO user_staking 
                        (id, user_id, plan_id, amount, start_date, end_date, is_active, is_withdrawn, total_earned, transaction_hash)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                    ''', (
                        stake.get('id'), stake.get('user_id'), stake.get('plan_id'),
                        stake.get('amount'), stake.get('start_date'), stake.get('end_date'),
                        stake.get('is_active', 1), stake.get('is_withdrawn', 0),
                        stake.get('total_earned', 0), stake.get('transaction_hash')
                    ))
                except Exception as e:
                    print(f"‚ö†Ô∏è Erreur restauration staking {stake.get('id')}: {e}")
        
        # Restaurer TOUS les bots de trading
        if 'all_bots_history' in replit_db:
            bots_data = json.loads(replit_db['all_bots_history'])
            for bot in bots_data:
                try:
                    conn.execute('''
                        INSERT OR REPLACE INTO user_trading_bots 
                        (id, user_id, strategy_id, amount, start_date, end_date, is_active, total_profit, daily_profit, last_profit_date, transaction_hash)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                    ''', (
                        bot.get('id'), bot.get('user_id'), bot.get('strategy_id'),
                        bot.get('amount'), bot.get('start_date'), bot.get('end_date'),
                        bot.get('is_active', 1), bot.get('total_profit', 0),
                        bot.get('daily_profit', 0), bot.get('last_profit_date'), bot.get('transaction_hash')
                    ))
                except Exception as e:
                    print(f"‚ö†Ô∏è Erreur restauration bot {bot.get('id')}: {e}")
        
        # Restaurer TOUS les copy trades
        if 'all_copy_trading_history' in replit_db:
            copy_trades_data = json.loads(replit_db['all_copy_trading_history'])
            for trade in copy_trades_data:
                try:
                    conn.execute('''
                        INSERT OR REPLACE INTO user_copy_trading 
                        (id, user_id, trader_id, amount, start_date, end_date, is_active, total_profit, copy_ratio, transaction_hash)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                    ''', (
                        trade.get('id'), trade.get('user_id'), trade.get('trader_id'),
                        trade.get('amount'), trade.get('start_date'), trade.get('end_date'),
                        trade.get('is_active', 1), trade.get('total_profit', 0),
                        trade.get('copy_ratio', 1.0), trade.get('transaction_hash')
                    ))
                except Exception as e:
                    print(f"‚ö†Ô∏è Erreur restauration copy trade {trade.get('id')}: {e}")
        
        # Restaurer TOUS les investissements projets
        if 'all_projects_history' in replit_db:
            projects_data = json.loads(replit_db['all_projects_history'])
            for proj in projects_data:
                try:
                    conn.execute('''
                        INSERT OR REPLACE INTO project_investments 
                        (id, user_id, project_id, amount, investment_date, transaction_hash)
                        VALUES (?, ?, ?, ?, ?, ?)
                    ''', (
                        proj.get('id'), proj.get('user_id'), proj.get('project_id'),
                        proj.get('amount'), proj.get('investment_date'), proj.get('transaction_hash')
                    ))
                except Exception as e:
                    print(f"‚ö†Ô∏è Erreur restauration projet {proj.get('id')}: {e}")
        
        # Restaurer TOUTES les transactions
        if 'all_transactions_history' in replit_db:
            transactions_data = json.loads(replit_db['all_transactions_history'])
            for trans in transactions_data:
                try:
                    conn.execute('''
                        INSERT OR REPLACE INTO transactions 
                        (id, user_id, type, amount, status, transaction_hash, created_at, updated_at)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                    ''', (
                        trans.get('id'), trans.get('user_id'), trans.get('type'),
                        trans.get('amount'), trans.get('status'), trans.get('transaction_hash'),
                        trans.get('created_at'), trans.get('updated_at')
                    ))
                except Exception as e:
                    print(f"‚ö†Ô∏è Erreur restauration transaction {trans.get('id')}: {e}")
        
        # Restaurer les soldes utilisateurs
        if 'user_balances' in replit_db:
            users_data = json.loads(replit_db['user_balances'])
            for user in users_data:
                try:
                    conn.execute('''
                        UPDATE users SET balance = ? WHERE id = ?
                    ''', (user.get('balance', 0), user.get('id')))
                except Exception as e:
                    print(f"‚ö†Ô∏è Erreur restauration solde utilisateur {user.get('id')}: {e}")
        
        conn.commit()
        conn.close()
        
        last_backup = replit_db.get('last_backup', 'Inconnue')
        print(f"‚úÖ Historique complet restaur√© depuis la sauvegarde du {last_backup}")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur restauration: {e}")
        return False

    # Transactions table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS transactions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            type TEXT NOT NULL,
            amount REAL NOT NULL,
            status TEXT DEFAULT 'pending',
            transaction_hash TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')

    # Add missing columns to existing tables
    try:
        # V√©rifier et ajouter les colonnes manquantes √† transactions
        columns = cursor.execute("PRAGMA table_info(transactions)").fetchall()
        column_names = [column[1] for column in columns]
        
        if 'updated_at' not in column_names:
            # Ajouter la colonne sans valeur par d√©faut d'abord
            cursor.execute('ALTER TABLE transactions ADD COLUMN updated_at TIMESTAMP')
            # Puis mettre √† jour les enregistrements existants avec la date actuelle
            cursor.execute('UPDATE transactions SET updated_at = CURRENT_TIMESTAMP WHERE updated_at IS NULL')
            print("‚úÖ Colonne updated_at ajout√©e √† la table transactions")
    except sqlite3.OperationalError as e:
        print(f"‚ö†Ô∏è Erreur ajout colonne updated_at: {e}")

    # V√©rifier et ajouter les colonnes 2FA manquantes √† users
    try:
        users_columns = cursor.execute("PRAGMA table_info(users)").fetchall()
        users_column_names = [column[1] for column in users_columns]
        
        if 'two_fa_enabled' not in users_column_names:
            cursor.execute('ALTER TABLE users ADD COLUMN two_fa_enabled BOOLEAN DEFAULT 0')
            print("‚úÖ Colonne two_fa_enabled ajout√©e √† la table users")
            
        if 'two_fa_secret' not in users_column_names:
            cursor.execute('ALTER TABLE users ADD COLUMN two_fa_secret TEXT')
            print("‚úÖ Colonne two_fa_secret ajout√©e √† la table users")
            
    except sqlite3.OperationalError as e:
        print(f"‚ö†Ô∏è Erreur ajout colonnes 2FA: {e}")

    # Notifications table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS notifications (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            title TEXT NOT NULL,
            message TEXT NOT NULL,
            type TEXT NOT NULL,
            is_read BOOLEAN DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')

    # Staking Plans table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS staking_plans (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            description TEXT,
            duration_days INTEGER NOT NULL,
            annual_rate REAL NOT NULL,
            min_amount REAL NOT NULL,
            max_amount REAL NOT NULL,
            penalty_rate REAL DEFAULT 0.05,
            is_active BOOLEAN DEFAULT 1,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    # User Staking table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_staking (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            plan_id INTEGER NOT NULL,
            amount REAL NOT NULL,
            start_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            end_date TIMESTAMP,
            is_active BOOLEAN DEFAULT 1,
            is_withdrawn BOOLEAN DEFAULT 0,
            total_earned REAL DEFAULT 0.0,
            transaction_hash TEXT,
            FOREIGN KEY (user_id) REFERENCES users (id),
            FOREIGN KEY (plan_id) REFERENCES staking_plans (id)
        )
    ''')

    # Frozen Investment Plans table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS frozen_plans (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            description TEXT,
            duration_days INTEGER NOT NULL,
            total_return_rate REAL NOT NULL,
            min_amount REAL NOT NULL,
            max_amount REAL NOT NULL,
            is_active BOOLEAN DEFAULT 1,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    # User Frozen Investments table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_frozen_investments (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            plan_id INTEGER NOT NULL,
            amount REAL NOT NULL,
            start_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            end_date TIMESTAMP,
            final_amount REAL NOT NULL,
            is_active BOOLEAN DEFAULT 1,
            is_completed BOOLEAN DEFAULT 0,
            transaction_hash TEXT,
            FOREIGN KEY (user_id) REFERENCES users (id),
            FOREIGN KEY (plan_id) REFERENCES frozen_plans (id)
        )
    ''')

    # Portfolio Distribution table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS portfolio_distributions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            total_amount REAL NOT NULL,
            distribution_data TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')

    # Auto Trading Strategies table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS trading_strategies (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            description TEXT NOT NULL,
            risk_level TEXT NOT NULL,
            expected_daily_return REAL NOT NULL,
            min_amount REAL NOT NULL,
            max_amount REAL NOT NULL,
            strategy_type TEXT NOT NULL,
            parameters TEXT NOT NULL,
            is_active BOOLEAN DEFAULT 1,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    # User Trading Bots table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_trading_bots (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            strategy_id INTEGER NOT NULL,
            amount REAL NOT NULL,
            start_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            end_date TIMESTAMP,
            is_active BOOLEAN DEFAULT 1,
            total_profit REAL DEFAULT 0.0,
            daily_profit REAL DEFAULT 0.0,
            last_profit_date TIMESTAMP,
            transaction_hash TEXT,
            FOREIGN KEY (user_id) REFERENCES users (id),
            FOREIGN KEY (strategy_id) REFERENCES trading_strategies (id)
        )
    ''')

    # Top Traders table (pour copy trading)
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS top_traders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            avatar_url TEXT,
            total_return REAL NOT NULL,
            win_rate REAL NOT NULL,
            followers_count INTEGER DEFAULT 0,
            monthly_return REAL NOT NULL,
            risk_score REAL NOT NULL,
            trading_style TEXT NOT NULL,
            min_copy_amount REAL NOT NULL,
            max_copy_amount REAL NOT NULL,
            is_active BOOLEAN DEFAULT 1,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    # User Copy Trading table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_copy_trading (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            trader_id INTEGER NOT NULL,
            amount REAL NOT NULL,
            start_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            end_date TIMESTAMP,
            is_active BOOLEAN DEFAULT 1,
            total_profit REAL DEFAULT 0.0,
            copy_ratio REAL DEFAULT 1.0,
            transaction_hash TEXT,
            FOREIGN KEY (user_id) REFERENCES users (id),
            FOREIGN KEY (trader_id) REFERENCES top_traders (id)
        )
    ''')

    # Trading Signals table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS trading_signals (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            strategy_id INTEGER NOT NULL,
            signal_type TEXT NOT NULL,
            asset_pair TEXT NOT NULL,
            action TEXT NOT NULL,
            price REAL NOT NULL,
            confidence REAL NOT NULL,
            timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            is_executed BOOLEAN DEFAULT 0,
            FOREIGN KEY (strategy_id) REFERENCES trading_strategies (id)
        )
    ''')

    # Support Tickets table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS support_tickets (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            subject TEXT NOT NULL,
            status TEXT DEFAULT 'open',
            priority TEXT DEFAULT 'normal',
            category TEXT DEFAULT 'general',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            assigned_to TEXT,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')

    # Support Messages table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS support_messages (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            ticket_id INTEGER NOT NULL,
            user_id INTEGER,
            message TEXT NOT NULL,
            is_admin BOOLEAN DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (ticket_id) REFERENCES support_tickets (id),
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')

    # FAQ table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS faq (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            question TEXT NOT NULL,
            answer TEXT NOT NULL,
            category TEXT DEFAULT 'general',
            is_active BOOLEAN DEFAULT 1,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    # Security Logs table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS security_logs (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            action TEXT NOT NULL,
            details TEXT,
            ip_address TEXT,
            user_agent TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')

    # Insert default FAQ entries
    cursor.execute('''
        INSERT OR IGNORE INTO faq (question, answer, category) VALUES 
        ('Comment d√©poser des fonds ?', 'Rendez-vous dans votre portefeuille et cliquez sur "D√©poser". Suivez les instructions pour transf√©rer vos USDT.', 'wallet'),
        ('Quand puis-je retirer mes gains ?', 'Vos gains quotidiens sont disponibles imm√©diatement pour retrait. Le capital initial est lib√©r√© √† la fin du plan.', 'investment'),
        ('Les investissements sont-ils s√©curis√©s ?', 'Oui, nous utilisons des smart contracts et un syst√®me de s√©curit√© multicouche pour prot√©ger vos investissements.', 'security'),
        ('Comment fonctionne le parrainage ?', 'Partagez votre code de parrainage unique et recevez 5% sur tous les investissements de vos filleuls.', 'referral'),
        ('Quel est le montant minimum d investissement ?', 'Le montant minimum est de 20 USDT pour tous nos plans d investissement.', 'investment')
    ''')

    

    # ROI Plans table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS roi_plans (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            description TEXT,
            daily_rate REAL NOT NULL,
            duration_days INTEGER NOT NULL,
            min_amount REAL NOT NULL,
            max_amount REAL NOT NULL,
            is_active BOOLEAN DEFAULT 1,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    # Insert ultra-premium ROI plans (only if not exist)
    roi_count = cursor.execute('SELECT COUNT(*) as count FROM roi_plans').fetchone()['count']
    
    if roi_count == 0:
        cursor.execute('''
            INSERT INTO roi_plans (name, description, daily_rate, duration_days, min_amount, max_amount)
        VALUES 
        ('Rocket Launch', 'üöÄ Plan meteore ultra-rentable ! 35% quotidien pendant 3 jours.', 0.35, 3, 20, 2000),
        ('Mega Booster', 'üí• Plan mega booster ! 30% quotidien pendant 5 jours.', 0.30, 5, 20, 3000),
        ('Super Express', '‚ö° Plan super express ! 25% quotidien pendant 7 jours.', 0.25, 7, 20, 4000),
        ('Lightning Pro', '‚ö° Plan lightning pro ! 22% quotidien pendant 10 jours.', 0.22, 10, 20, 5000),
        ('Turbo Flash', 'üî• Plan turbo flash ! 20% quotidien pendant 14 jours.', 0.20, 14, 20, 8000)
    ''')

    # Insert top 10 staking plans - Starting from 20 USDT (only if not exist)
    staking_count = cursor.execute('SELECT COUNT(*) as count FROM staking_plans').fetchone()['count']
    
    if staking_count == 0:
        cursor.execute('''
            INSERT INTO staking_plans (name, description, duration_days, annual_rate, min_amount, max_amount, penalty_rate)
        VALUES 
        ('Quick Stake', '‚ö° Staking rapide 7 jours ! 8% annuel. Parfait pour tester le staking.', 7, 0.08, 20, 300, 0.02),
        ('Flex Stake', 'üîÑ Staking flexible 15 jours ! 12% annuel. Id√©al pour d√©butants.', 15, 0.12, 20, 500, 0.03),
        ('Standard Stake', 'üìä Staking standard 30 jours ! 18% annuel. Notre choix populaire.', 30, 0.18, 20, 1000, 0.04),
        ('Power Stake', 'üí™ Staking puissant 45 jours ! 22% annuel. Excellent rendement.', 45, 0.22, 20, 2000, 0.05),
        ('Premium Stake', 'üíé Staking premium 60 jours ! 28% annuel. Pour investisseurs s√©rieux.', 60, 0.28, 20, 3000, 0.06),
        ('Elite Stake', 'üèÜ Staking elite 90 jours ! 35% annuel. Performance exceptionnelle.', 90, 0.35, 20, 5000, 0.07),
        ('Master Stake', 'üëë Staking master 120 jours ! 42% annuel. Retour impressionnant.', 120, 0.42, 20, 8000, 0.08),
        ('Royal Stake', 'üéñÔ∏è Staking royal 150 jours ! 50% annuel. Rendement royal.', 150, 0.50, 20, 12000, 0.09),
        ('Supreme Stake', '‚≠ê Staking supr√™me 180 jours ! 60% annuel. Le top du staking.', 180, 0.60, 20, 20000, 0.10),
        ('Ultimate Stake', 'üöÄ Staking ultimate 365 jours ! 80% annuel. Performance ultime.', 365, 0.80, 20, 50000, 0.12)
    ''')

    # Insert top 10 frozen plans - Starting from 20 USDT (only if not exist)
    frozen_count = cursor.execute('SELECT COUNT(*) as count FROM frozen_plans').fetchone()['count']
    
    if frozen_count == 0:
        cursor.execute('''
            INSERT INTO frozen_plans (name, description, duration_days, total_return_rate, min_amount, max_amount)
        VALUES 
        ('Ice Starter', 'üßä Plan gel√© d√©butant ! 30 jours gel√©s pour 150% de retour total.', 30, 1.5, 20, 400),
        ('Frost Basic', '‚ùÑÔ∏è Plan frost basique ! 60 jours gel√©s pour 180% de retour total.', 60, 1.8, 20, 600),
        ('Freeze Standard', 'ü•∂ Plan freeze standard ! 90 jours gel√©s pour 220% de retour total.', 90, 2.2, 20, 800),
        ('Glacial Pro', 'üèîÔ∏è Plan glacial pro ! 120 jours gel√©s pour 280% de retour total.', 120, 2.8, 20, 1200),
        ('Arctic Elite', 'üêß Plan arctique elite ! 150 jours gel√©s pour 350% de retour total.', 150, 3.5, 20, 2000),
        ('Polar Premium', 'üêª‚Äç‚ùÑÔ∏è Plan polaire premium ! 180 jours gel√©s pour 450% de retour total.', 180, 4.5, 20, 3000),
        ('Blizzard VIP', '‚ùÑÔ∏è Plan blizzard VIP ! 240 jours gel√©s pour 600% de retour total.', 240, 6.0, 20, 5000),
        ('Absolute Zero', 'üå®Ô∏è Plan z√©ro absolu ! 300 jours gel√©s pour 800% de retour total.', 300, 8.0, 20, 8000),
        ('Eternal Frost', 'üßä Plan gel √©ternel ! 360 jours gel√©s pour 1200% de retour total.', 360, 12.0, 20, 15000),
        ('Cosmic Ice', 'üåå Plan glace cosmique ! 450 jours gel√©s pour 2000% de retour total.', 450, 20.0, 20, 50000)
    ''')

    # Insert top 10 projects - Starting from 20 USDT (only if not exist)
    projects_count = cursor.execute('SELECT COUNT(*) as count FROM projects').fetchone()['count']
    
    if projects_count == 0:
        cursor.execute('''
            INSERT INTO projects (title, description, category, target_amount, expected_return, duration_months, min_investment, max_investment, deadline)
        VALUES 
        ('Crypto Mining Farm', '‚õèÔ∏è Ferme de minage crypto moderne ! 15% de retour en 6 mois.', 'Mining', 10000, 0.15, 6, 20, 1000, datetime("now", "+30 days")),
        ('E-commerce Platform', 'üõí Plateforme e-commerce innovante ! 18% de retour en 8 mois.', 'Tech', 15000, 0.18, 8, 20, 1500, datetime("now", "+45 days")),
        ('Green Energy Solar', '‚òÄÔ∏è √ânergie solaire verte ! 20% de retour en 12 mois.', '√ânergie', 25000, 0.20, 12, 20, 2500, datetime("now", "+60 days")),
        ('FinTech Startup', 'üí≥ Startup fintech prometteuse ! 22% de retour en 10 mois.', 'Finance', 20000, 0.22, 10, 20, 2000, datetime("now", "+40 days")),
        ('Real Estate Fund', 'üè† Fonds immobilier diversifi√© ! 25% de retour en 18 mois.', 'Immobilier', 50000, 0.25, 18, 20, 5000, datetime("now", "+75 days")),
        ('AI Tech Company', 'ü§ñ Entreprise tech IA ! 28% de retour en 14 mois.', 'Intelligence Artificielle', 35000, 0.28, 14, 20, 3500, datetime("now", "+50 days")),
        ('Renewable Energy', 'üå± √ânergies renouvelables ! 30% de retour en 20 mois.', '√âcologie', 40000, 0.30, 20, 20, 4000, datetime("now", "+65 days")),
        ('Biotech Innovation', 'üß¨ Innovation biotechnologique ! 35% de retour en 24 mois.', 'Biotechnologie', 60000, 0.35, 24, 20, 6000, datetime("now", "+80 days")),
        ('Space Technology', 'üöÄ Technologie spatiale ! 40% de retour en 30 mois.', 'Espace', 80000, 0.40, 30, 20, 8000, datetime("now", "+90 days")),
        ('Quantum Computing', '‚öõÔ∏è Informatique quantique ! 50% de retour en 36 mois.', 'Quantique', 100000, 0.50, 36, 20, 10000, datetime("now", "+120 days"))
    ''')

    # Insert trading strategies (only if not exist)
    strategies_count = cursor.execute('SELECT COUNT(*) as count FROM trading_strategies').fetchone()['count']
    
    if strategies_count == 0:
        cursor.execute('''
            INSERT INTO trading_strategies (name, description, risk_level, expected_daily_return, min_amount, max_amount, strategy_type, parameters)
        VALUES 
        ('IA Conservateur', 'üõ°Ô∏è Strat√©gie IA s√©curis√©e avec analyse de risque avanc√©e. Id√©ale pour d√©buter le trading automatique.', 'Faible', 0.015, 20, 1000, 'ai_conservative', '{"stop_loss": 0.05, "take_profit": 0.03, "max_trades": 3}'),
        ('IA √âquilibr√©', '‚öñÔ∏è Strat√©gie IA √©quilibr√©e combinant s√©curit√© et performance. Parfait √©quilibre risque/rendement.', 'Moyen', 0.025, 20, 2000, 'ai_balanced', '{"stop_loss": 0.08, "take_profit": 0.05, "max_trades": 5}'),
        ('IA Agressif', 'üöÄ Strat√©gie IA haute performance avec algorithmes avanc√©s. Pour investisseurs exp√©riment√©s.', '√âlev√©', 0.04, 20, 5000, 'ai_aggressive', '{"stop_loss": 0.12, "take_profit": 0.08, "max_trades": 8}'),
        ('Scalping Bot', '‚ö° Bot de scalping ultra-rapide avec IA pr√©dictive. Trades haute fr√©quence pour profits constants.', 'Moyen', 0.035, 20, 3000, 'scalping_ai', '{"timeframe": "1m", "trades_per_hour": 10, "profit_target": 0.02}'),
        ('Arbitrage IA', 'üîÑ Bot d arbitrage intelligent d√©tectant les √©carts de prix entre exchanges. Profits garantis.', 'Faible', 0.02, 20, 10000, 'arbitrage_ai', '{"min_spread": 0.01, "max_exposure": 0.3, "exchanges": 5}'),
        ('Swing Trading Pro', 'üìà IA de swing trading analysant les tendances moyennes. Positions 2-7 jours pour profits optimaux.', 'Moyen', 0.03, 20, 4000, 'swing_ai', '{"timeframe": "4h", "trend_strength": 0.7, "position_size": 0.2}'),
        ('DeFi Yield Bot', 'üåæ Bot DeFi intelligent optimisant les rendements sur protocols d√©centralis√©s. Farming automatis√©.', 'Moyen', 0.045, 20, 8000, 'defi_yield', '{"protocols": ["uniswap", "compound"], "rebalance_frequency": "daily"}'),
        ('Grid Trading IA', 'üî≥ Strat√©gie de trading en grille avec IA adaptative. Profits dans tous les march√©s.', 'Faible', 0.018, 20, 6000, 'grid_ai', '{"grid_size": 20, "price_range": 0.1, "adaptive": true}'),
        ('News Trading Bot', 'üì∞ Bot r√©agissant aux news crypto en temps r√©el avec analyse sentiment IA. Profits sur volatilit√©.', '√âlev√©', 0.038, 20, 2500, 'news_ai', '{"sentiment_threshold": 0.8, "reaction_time": "30s", "news_sources": 15}'),
        ('Multi-Strategy IA', 'üéØ Bot combinant plusieurs strat√©gies IA adaptatives. Performance optimis√©e automatiquement.', 'Moyen', 0.032, 20, 15000, 'multi_ai', '{"strategies": 5, "allocation_dynamic": true, "rebalance": "weekly"}')
    ''')

    # Insert top traders for copy trading (only if not exist)
    traders_count = cursor.execute('SELECT COUNT(*) as count FROM top_traders').fetchone()['count']
    
    if traders_count == 0:
        cursor.execute('''
            INSERT INTO top_traders (name, avatar_url, total_return, win_rate, followers_count, monthly_return, risk_score, trading_style, min_copy_amount, max_copy_amount)
        VALUES 
        ('CryptoKing_AI', '/static/avatars/trader1.png', 245.5, 78.5, 1250, 25.2, 6.2, 'Swing Trading + IA', 20, 5000),
        ('QuantMaster_Pro', '/static/avatars/trader2.png', 189.3, 82.1, 980, 18.7, 4.8, 'Algorithmic Trading', 20, 3000),
        ('ScalpBot_Elite', '/static/avatars/trader3.png', 156.8, 75.3, 1580, 22.4, 7.1, 'Scalping + Arbitrage', 20, 2500),
        ('TrendHunter_IA', '/static/avatars/trader4.png', 198.7, 80.2, 920, 19.8, 5.5, 'Trend Following IA', 20, 4000),
        ('DeFi_Wizard', '/static/avatars/trader5.png', 134.2, 88.9, 750, 15.8, 3.2, 'DeFi Yield Farming', 20, 8000),
        ('Volatility_Pro', '/static/avatars/trader6.png', 178.5, 73.4, 1120, 21.3, 8.5, 'Volatility Trading', 20, 3500),
        ('AI_GridMaster', '/static/avatars/trader7.png', 145.6, 85.7, 680, 16.9, 4.1, 'Grid + IA Adaptive', 20, 6000),
        ('NewsBot_Elite', '/static/avatars/trader8.png', 167.3, 76.8, 1340, 20.1, 6.8, 'News-based Trading', 20, 2800),
        ('Hodl_IA_Pro', '/static/avatars/trader9.png', 123.8, 91.2, 2100, 14.5, 2.9, 'Long-term IA', 20, 10000),
        ('MultiStrat_Bot', '/static/avatars/trader10.png', 201.4, 79.6, 1450, 23.7, 5.9, 'Multi-Strategy IA', 20, 7500)
    ''')

    conn.commit()
    conn.close()

# √âtat global pour l'activation admin
ADMIN_ACCESS_ENABLED = False
ADMIN_ACCESS_EXPIRY = None

# Authentication decorator
def login_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'user_id' not in session:
            return redirect(url_for('login'))
        return f(*args, **kwargs)
    return decorated_function

# Admin decorator avec v√©rification d'activation
def admin_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        global ADMIN_ACCESS_ENABLED, ADMIN_ACCESS_EXPIRY

        # V√©rifier si l'acc√®s admin est expir√©
        if ADMIN_ACCESS_EXPIRY and datetime.now() > ADMIN_ACCESS_EXPIRY:
            ADMIN_ACCESS_ENABLED = False
            ADMIN_ACCESS_EXPIRY = None

        if 'user_id' not in session or session.get('is_admin') != True:
            flash('Acc√®s refus√©. Privil√®ges administrateur requis.', 'error')
            return redirect(url_for('dashboard'))

        if not ADMIN_ACCESS_ENABLED:
            flash('Acc√®s administrateur d√©sactiv√©. Activez d\'abord l\'acc√®s avec la commande appropri√©e.', 'warning')
            return redirect(url_for('admin_activation_required'))

        return f(*args, **kwargs)
    return decorated_function

def enable_admin_access(duration_minutes=30):
    """Active l'acc√®s admin pour une dur√©e limit√©e"""
    global ADMIN_ACCESS_ENABLED, ADMIN_ACCESS_EXPIRY
    ADMIN_ACCESS_ENABLED = True
    ADMIN_ACCESS_EXPIRY = datetime.now() + timedelta(minutes=duration_minutes)
    print(f"üîì Acc√®s admin activ√© pour {duration_minutes} minutes jusqu'√† {ADMIN_ACCESS_EXPIRY.strftime('%H:%M:%S')}")

def disable_admin_access():
    """D√©sactive imm√©diatement l'acc√®s admin"""
    global ADMIN_ACCESS_ENABLED, ADMIN_ACCESS_EXPIRY
    ADMIN_ACCESS_ENABLED = False
    ADMIN_ACCESS_EXPIRY = None
    print("üîí Acc√®s admin d√©sactiv√©")

def get_admin_status():
    """Retourne le statut de l'acc√®s admin"""
    global ADMIN_ACCESS_ENABLED, ADMIN_ACCESS_EXPIRY

    if ADMIN_ACCESS_EXPIRY and datetime.now() > ADMIN_ACCESS_EXPIRY:
        ADMIN_ACCESS_ENABLED = False
        ADMIN_ACCESS_EXPIRY = None

    return {
        'enabled': ADMIN_ACCESS_ENABLED,
        'expiry': ADMIN_ACCESS_EXPIRY,
        'remaining_minutes': (ADMIN_ACCESS_EXPIRY - datetime.now()).total_seconds() / 60 if ADMIN_ACCESS_EXPIRY else 0
    }

# Utility functions
def get_db_connection():
    import time
    max_retries = 5
    for attempt in range(max_retries):
        try:
            conn = sqlite3.connect(DATABASE, timeout=60.0)
            conn.row_factory = sqlite3.Row
            # Enable WAL mode for better concurrency
            conn.execute('PRAGMA journal_mode=WAL;')
            conn.execute('PRAGMA busy_timeout=60000;')  # 60 seconds timeout
            conn.execute('PRAGMA synchronous=NORMAL;')  # Better performance
            conn.execute('PRAGMA cache_size=10000;')     # Larger cache
            conn.execute('PRAGMA temp_store=memory;')    # Use memory for temp
            return conn
        except sqlite3.OperationalError as e:
            if "database is locked" in str(e) and attempt < max_retries - 1:
                time.sleep(0.5 * (attempt + 1))  # Progressive backoff
                continue
            else:
                print(f"‚ùå Database connection failed after {max_retries} attempts: {e}")
                raise e
        except Exception as e:
            print(f"‚ùå Unexpected database error: {e}")
            raise e
    return conn

def generate_transaction_hash():
    return hashlib.sha256(f"{datetime.now().isoformat()}{secrets.token_hex(16)}".encode()).hexdigest()

def generate_referral_code():
    return secrets.token_urlsafe(8).upper()

def add_notification(user_id, title, message, type='info'):
    import time
    max_retries = 3
    for attempt in range(max_retries):
        try:
            conn = get_db_connection()
            conn.execute('''
                INSERT INTO notifications (user_id, title, message, type)
                VALUES (?, ?, ?, ?)
            ''', (user_id, title, message, type))
            conn.commit()
            conn.close()
            return
        except sqlite3.OperationalError as e:
            if "database is locked" in str(e) and attempt < max_retries - 1:
                time.sleep(0.1 * (attempt + 1))  # Progressive backoff
                continue
            else:
                print(f"‚ùå Erreur ajout notification apr√®s {attempt + 1} tentatives: {e}")
                break
        except Exception as e:
            print(f"‚ùå Erreur ajout notification: {e}")
            break

# Scheduled tasks
def calculate_daily_profits():
    # Sauvegarder les donn√©es importantes si Replit DB est disponible
    if REPLIT_DB_AVAILABLE:
        backup_critical_data()
    
    conn = get_db_connection()
    
    # Plus d'investissements ROI actifs
    active_investments = []

    # R√©cup√©rer tous les bots de trading actifs
    active_bots = conn.execute('''
        SELECT utb.*, u.email, ts.name as strategy_name
        FROM user_trading_bots utb
        JOIN users u ON utb.user_id = u.id
        JOIN trading_strategies ts ON utb.strategy_id = ts.id
        WHERE utb.is_active = 1
    ''').fetchall()

    # R√©cup√©rer tous les copy trades actifs
    active_copies = conn.execute('''
        SELECT uct.*, u.email, tt.name as trader_name, tt.monthly_return
        FROM user_copy_trading uct
        JOIN users u ON uct.user_id = u.id
        JOIN top_traders tt ON uct.trader_id = tt.id
        WHERE uct.is_active = 1
    ''').fetchall()

    print(f"üîÑ Calcul des profits pour {len(active_investments)} investissements, {len(active_bots)} bots, {len(active_copies)} copy trades")

    # Traiter les investissements ROI classiques
    for investment in active_investments:
        try:
            # V√©rifier si l'investissement est vraiment actif (pas expir√©)
            from datetime import datetime
            if investment['end_date']:
                end_date = datetime.fromisoformat(investment['end_date'].replace('Z', ''))
                if datetime.now() > end_date:
                    # Marquer comme termin√©
                    conn.execute('''
                        UPDATE user_investments 
                        SET is_active = 0 
                        WHERE id = ?
                    ''', (investment['id'],))
                    
                    add_notification(
                        investment['user_id'],
                        'Plan d\'investissement termin√©',
                        f'Votre plan {investment["plan_name"]} est arriv√© √† terme. Total gagn√©: {investment["total_earned"]:.2f} USDT',
                        'info'
                    )
                    continue

            # Calculate daily profit
            daily_profit = investment['daily_profit']
            
            if daily_profit > 0:
                print(f"üí∞ Ajout de {daily_profit:.2f} USDT pour l'utilisateur {investment['user_id']} - Plan: {investment['plan_name']}")

                # Update user balance
                conn.execute('''
                    UPDATE users 
                    SET balance = balance + ? 
                    WHERE id = ?
                ''', (daily_profit, investment['user_id']))

                # Update total earned
                current_earned = investment['total_earned'] if investment['total_earned'] else 0
                new_total_earned = current_earned + daily_profit
                conn.execute('''
                    UPDATE user_investments 
                    SET total_earned = ? 
                    WHERE id = ?
                ''', (new_total_earned, investment['id']))

                # Add transaction record
                conn.execute('''
                    INSERT INTO transactions (user_id, type, amount, status, transaction_hash)
                    VALUES (?, 'daily_profit', ?, 'completed', ?)
                ''', (investment['user_id'], daily_profit, generate_transaction_hash()))

                # Add notification
                add_notification(
                    investment['user_id'],
                    'Profit journalier re√ßu',
                    f'Vous avez re√ßu {daily_profit:.2f} USDT de votre plan {investment["plan_name"]}',
                    'success'
                )

        except Exception as e:
            print(f"‚ùå Erreur calcul profit pour investissement {investment['id']}: {e}")
            continue

    # Traiter les bots de trading
    for bot in active_bots:
        try:
            daily_profit = bot['daily_profit']
            
            if daily_profit > 0:
                print(f"ü§ñ Ajout de {daily_profit:.2f} USDT pour le bot {bot['id']} de l'utilisateur {bot['user_id']}")

                # Mettre √† jour le solde utilisateur
                conn.execute('''
                    UPDATE users 
                    SET balance = balance + ? 
                    WHERE id = ?
                ''', (daily_profit, bot['user_id']))

                # Mettre √† jour les profits totaux du bot
                current_profit = bot['total_profit'] if bot['total_profit'] else 0
                new_total_profit = current_profit + daily_profit
                conn.execute('''
                    UPDATE user_trading_bots 
                    SET total_profit = ?, last_profit_date = CURRENT_TIMESTAMP 
                    WHERE id = ?
                ''', (new_total_profit, bot['id']))

                # Ajouter transaction
                conn.execute('''
                    INSERT INTO transactions (user_id, type, amount, status, transaction_hash)
                    VALUES (?, 'bot_profit', ?, 'completed', ?)
                ''', (bot['user_id'], daily_profit, generate_transaction_hash()))

                # Ajouter notification
                add_notification(
                    bot['user_id'],
                    'Profit bot de trading',
                    f'Votre bot {bot["strategy_name"]} a g√©n√©r√© {daily_profit:.2f} USDT de profit!',
                    'success'
                )

        except Exception as e:
            print(f"‚ùå Erreur calcul profit pour bot {bot['id']}: {e}")
            continue

    # Traiter les copy trades
    for copy_trade in active_copies:
        try:
            # Calculer le profit bas√© sur le rendement mensuel du trader
            monthly_return = copy_trade['monthly_return'] / 100  # Convertir en d√©cimal
            daily_return = monthly_return / 30  # Approximation quotidienne
            daily_profit = copy_trade['amount'] * daily_return * copy_trade['copy_ratio']
            
            if daily_profit > 0:
                print(f"üìà Ajout de {daily_profit:.2f} USDT pour le copy trade {copy_trade['id']} de l'utilisateur {copy_trade['user_id']}")

                # Mettre √† jour le solde utilisateur
                conn.execute('''
                    UPDATE users 
                    SET balance = balance + ? 
                    WHERE id = ?
                ''', (daily_profit, copy_trade['user_id']))

                # Mettre √† jour les profits totaux du copy trade
                current_profit = copy_trade['total_profit'] if copy_trade['total_profit'] else 0
                new_total_profit = current_profit + daily_profit
                conn.execute('''
                    UPDATE user_copy_trading 
                    SET total_profit = ? 
                    WHERE id = ?
                ''', (new_total_profit, copy_trade['id']))

                # Ajouter transaction
                conn.execute('''
                    INSERT INTO transactions (user_id, type, amount, status, transaction_hash)
                    VALUES (?, 'copy_profit', ?, 'completed', ?)
                ''', (copy_trade['user_id'], daily_profit, generate_transaction_hash()))

                # Ajouter notification
                add_notification(
                    copy_trade['user_id'],
                    'Profit copy trading',
                    f'Votre copy de {copy_trade["trader_name"]} a g√©n√©r√© {daily_profit:.2f} USDT de profit!',
                    'success'
                )

        except Exception as e:
            print(f"‚ùå Erreur calcul profit pour copy trade {copy_trade['id']}: {e}")
            continue

    conn.commit()
    conn.close()
    print("‚úÖ Calcul des profits quotidiens termin√©")

# Routes
@app.route('/')
def index():
    return render_template('index.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        data = request.get_json() if request.is_json else request.form

        email = data.get('email')
        password = data.get('password')
        first_name = data.get('first_name')
        last_name = data.get('last_name')
        referral_code = data.get('referral_code', '')

        if not all([email, password, first_name, last_name]):
            return jsonify({'error': 'Tous les champs sont requis'}), 400

        conn = get_db_connection()

        # Check if user already exists
        if conn.execute('SELECT id FROM users WHERE email = ?', (email,)).fetchone():
            return jsonify({'error': 'Cet email est d√©j√† utilis√©'}), 400

        # Hash password
        password_hash = generate_password_hash(password)
        user_referral_code = generate_referral_code()

        # Insert user
        cursor = conn.execute('''
            INSERT INTO users (email, password_hash, first_name, last_name, referral_code, referred_by)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (email, password_hash, first_name, last_name, user_referral_code, referral_code))

        user_id = cursor.lastrowid
        conn.commit()
        conn.close()

        # Auto login
        session['user_id'] = user_id
        session['email'] = email
        session['first_name'] = first_name

        return jsonify({'success': True, 'redirect': url_for('dashboard')})

    return render_template('register.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        data = request.get_json() if request.is_json else request.form

        email = data.get('email')
        password = data.get('password')

        if not email or not password:
            return jsonify({'error': 'Email et mot de passe requis'}), 400

        conn = get_db_connection()
        user = conn.execute('SELECT * FROM users WHERE email = ?', (email,)).fetchone()
        conn.close()

        if user and check_password_hash(user['password_hash'], password):
            session['user_id'] = user['id']
            session['email'] = user['email']
            session['first_name'] = user['first_name']

            # Liste blanche des administrateurs autoris√©s - TOUS LES UTILISATEURS
            ADMIN_EMAILS = [
                'admin@ttrust.com',
                'support@ttrust.com',
                'security@ttrust.com',
                'a@gmail.com'
            ]

            # V√©rification admin s√©curis√©e - ACC√àS POUR TOUS LES UTILISATEURS
            # Tous les utilisateurs peuvent maintenant acc√©der √† l'admin apr√®s activation
            is_potential_admin = True  # Tous les utilisateurs peuvent √™tre admin
            session['is_admin'] = False  # Toujours False par d√©faut
            session['is_potential_admin'] = is_potential_admin

            # Log de connexion admin potentiel
            if is_potential_admin:
                log_security_action(user['id'], 'potential_admin_login', f'Connexion utilisateur avec privil√®ges admin potentiels depuis {request.remote_addr}')

            return jsonify({'success': True, 'redirect': url_for('dashboard')})

        return jsonify({'error': 'Email ou mot de passe incorrect'}), 401

    return render_template('login.html')

@app.route('/logout')
def logout():
    session.clear()
    return redirect(url_for('index'))

@app.route('/dashboard')
@login_required
def dashboard():
    conn = get_db_connection()

    # Get user info
    user = conn.execute('SELECT * FROM users WHERE id = ?', (session['user_id'],)).fetchone()

    # Get active investments (sans les plans ROI)
    investments = []

    # Get project investments
    project_investments = conn.execute('''
        SELECT pi.*, p.title, p.status, p.expected_return
        FROM project_investments pi
        JOIN projects p ON pi.project_id = p.id
        WHERE pi.user_id = ?
        ORDER BY pi.investment_date DESC
    ''', (session['user_id'],)).fetchall()

    # Get notifications
    notifications_raw = conn.execute('''
        SELECT * FROM notifications 
        WHERE user_id = ? AND is_read = 0
        ORDER BY created_at DESC
        LIMIT 5
    ''', (session['user_id'],)).fetchall()

    # Convert notifications to dict and parse datetime safely
    notifications = []
    for notif in notifications_raw:
        notif_dict = dict(notif)
        try:
            if notif_dict.get('created_at'):
                if isinstance(notif_dict['created_at'], str):
                    # Remove timezone suffix if present and parse
                    date_str = notif_dict['created_at'].replace('Z', '').replace('+00:00', '')
                    notif_dict['created_at'] = datetime.fromisoformat(date_str)
                elif hasattr(notif_dict['created_at'], 'strftime'):
                    # Already a datetime object
                    pass
                else:
                    notif_dict['created_at'] = datetime.now()
            else:
                notif_dict['created_at'] = datetime.now()
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur parsing date notification: {e}")
            notif_dict['created_at'] = datetime.now()
        notifications.append(notif_dict)

    conn.close()

    # Debug info
    print(f"DEBUG: User {session['user_id']} has {len(investments)} active investments")
    for inv in investments:
        print(f"DEBUG: Investment {inv['id']}: {inv['plan_name']}, amount: {inv['amount']}, active: {inv['is_active']}")

    return render_template('dashboard.html', 
                         user=user, 
                         investments=investments, 
                         project_investments=project_investments,
                         notifications=notifications)





@app.route('/ultra-plans')
@login_required
def ultra_plans():
    """Page d√©di√©e aux plans ultra-rentables (20%+ quotidien)"""
    conn = get_db_connection()
    
    # R√©cup√©rer seulement les plans ultra-rentables (20%+ quotidien)
    ultra_plans = conn.execute('''
        SELECT * FROM roi_plans 
        WHERE is_active = 1 AND daily_rate >= 0.20
        ORDER BY daily_rate DESC, duration_days ASC
    ''').fetchall()
    
    conn.close()

    return render_template('ultra_plans.html', ultra_plans=ultra_plans)

@app.route('/invest-roi', methods=['POST'])
@login_required
def invest_roi():
    """Investir dans un plan ROI ultra-rentable"""
    data = request.get_json()
    plan_id = data.get('plan_id')
    amount = float(data.get('amount', 0))

    conn = get_db_connection()

    # R√©cup√©rer les d√©tails du plan
    plan = conn.execute('SELECT * FROM roi_plans WHERE id = ?', (plan_id,)).fetchone()
    if not plan:
        conn.close()
        return jsonify({'error': 'Plan non trouv√©'}), 404

    # V√©rifier les limites de montant
    if amount < plan['min_amount'] or amount > plan['max_amount']:
        conn.close()
        return jsonify({'error': f'Montant doit √™tre entre {plan["min_amount"]} et {plan["max_amount"]} USDT'}), 400

    # V√©rifier le solde utilisateur
    user = conn.execute('SELECT balance FROM users WHERE id = ?', (session['user_id'],)).fetchone()
    if user['balance'] < amount:
        conn.close()
        return jsonify({'error': 'Solde insuffisant'}), 400

    # Calculer les dates et profits
    start_date = datetime.now()
    end_date = start_date + timedelta(days=plan['duration_days'])
    daily_profit = amount * plan['daily_rate']

    # Cr√©er l'investissement
    cursor = conn.execute('''
        INSERT INTO user_investments (user_id, plan_id, amount, start_date, end_date, daily_profit, transaction_hash)
        VALUES (?, ?, ?, ?, ?, ?, ?)
    ''', (session['user_id'], plan_id, amount, start_date, end_date, daily_profit, generate_transaction_hash()))

    # Mettre √† jour le solde utilisateur
    conn.execute('UPDATE users SET balance = balance - ? WHERE id = ?', (amount, session['user_id']))

    # Ajouter transaction
    conn.execute('''
        INSERT INTO transactions (user_id, type, amount, status, transaction_hash)
        VALUES (?, 'roi_investment', ?, 'completed', ?)
    ''', (session['user_id'], amount, generate_transaction_hash()))

    conn.commit()
    conn.close()

    # Ajouter notification
    add_notification(
        session['user_id'],
        'Investissement premium activ√©',
        f'Votre investissement de {amount} USDT dans {plan["name"]} a √©t√© activ√© avec succ√®s!',
        'success'
    )

    return jsonify({'success': True, 'message': f'Investissement dans {plan["name"]} r√©alis√© avec succ√®s!'})



@app.route('/investment-history')
@login_required
def investment_history():
    """Page d'historique complet des investissements"""
    conn = get_db_connection()

    # R√©cup√©rer tous les investissements ROI de l'utilisateur
    roi_investments = conn.execute('''
        SELECT ui.*, rp.name as plan_name
        FROM user_investments ui
        LEFT JOIN roi_plans rp ON ui.plan_id = rp.id
        WHERE ui.user_id = ?
        ORDER BY ui.start_date DESC
    ''', (session['user_id'],)).fetchall()

    # R√©cup√©rer tous les investissements staking
    staking_investments = conn.execute('''
        SELECT us.*, sp.name as plan_name, sp.duration_days, sp.annual_rate
        FROM user_staking us
        LEFT JOIN staking_plans sp ON us.plan_id = sp.id
        WHERE us.user_id = ?
        ORDER BY us.start_date DESC
    ''', (session['user_id'],)).fetchall()

    # R√©cup√©rer tous les bots de trading
    trading_bots = conn.execute('''
        SELECT utb.*, ts.name as strategy_name, ts.risk_level
        FROM user_trading_bots utb
        LEFT JOIN trading_strategies ts ON utb.strategy_id = ts.id
        WHERE utb.user_id = ?
        ORDER BY utb.start_date DESC
    ''', (session['user_id'],)).fetchall()

    # R√©cup√©rer tous les copy trades
    copy_trades = conn.execute('''
        SELECT uct.*, tt.name as trader_name, tt.total_return
        FROM user_copy_trading uct
        LEFT JOIN top_traders tt ON uct.trader_id = tt.id
        WHERE uct.user_id = ?
        ORDER BY uct.start_date DESC
    ''', (session['user_id'],)).fetchall()

    # R√©cup√©rer les investissements dans les projets
    project_investments = conn.execute('''
        SELECT pi.*, p.title, p.status, p.expected_return
        FROM project_investments pi
        JOIN projects p ON pi.project_id = p.id
        WHERE pi.user_id = ?
        ORDER BY pi.investment_date DESC
    ''', (session['user_id'],)).fetchall()

    conn.close()

    # Calculer les statistiques globales
    total_invested = 0
    total_profits = 0
    active_count = 0
    completed_count = 0

    # Traiter les investissements ROI
    for inv in roi_investments:
        total_invested += inv['amount'] if inv['amount'] else 0
        total_profits += inv['total_earned'] if inv['total_earned'] else 0
        if inv['is_active']:
            active_count += 1
        else:
            completed_count += 1

    # Traiter les investissements staking
    for inv in staking_investments:
        total_invested += inv['amount'] if inv['amount'] else 0
        total_profits += inv['total_earned'] if inv['total_earned'] else 0
        if inv['is_active']:
            active_count += 1
        else:
            completed_count += 1

    # Traiter les bots de trading
    for bot in trading_bots:
        total_invested += bot['amount'] if bot['amount'] else 0
        total_profits += bot['total_profit'] if bot['total_profit'] else 0
        if bot['is_active']:
            active_count += 1
        else:
            completed_count += 1

    # Traiter les copy trades
    for trade in copy_trades:
        total_invested += trade['amount'] if trade['amount'] else 0
        total_profits += trade['total_profit'] if trade['total_profit'] else 0
        if trade['is_active']:
            active_count += 1
        else:
            completed_count += 1

    # Traiter les investissements projets
    for proj in project_investments:
        total_invested += proj['amount'] if proj['amount'] else 0
        # Les projets sont consid√©r√©s comme actifs
        active_count += 1

    # Cr√©er un dictionnaire de statistiques
    stats = {
        'total_invested': total_invested,
        'total_profits': total_profits,
        'active_count': active_count,
        'completed_count': completed_count,
        'total_count': len(roi_investments) + len(staking_investments) + len(trading_bots) + len(copy_trades) + len(project_investments)
    }

    # Combiner tous les investissements pour les filtres
    all_investments = []
    
    # Ajouter les investissements ROI
    for inv in roi_investments:
        all_investments.append({
            'id': inv['id'],
            'type': 'roi',
            'amount': inv['amount'],
            'total_earned': inv['total_earned'] if inv['total_earned'] else 0,
            'is_active': inv['is_active'],
            'start_date': inv['start_date']
        })
    
    # Ajouter les autres types d'investissements
    for inv in staking_investments:
        all_investments.append({
            'id': inv['id'],
            'type': 'staking',
            'amount': inv['amount'],
            'total_earned': inv['total_earned'] if inv['total_earned'] else 0,
            'is_active': inv['is_active'],
            'start_date': inv['start_date']
        })
    
    for bot in trading_bots:
        all_investments.append({
            'id': bot['id'],
            'type': 'trading',
            'amount': bot['amount'],
            'total_earned': bot['total_profit'] if bot['total_profit'] else 0,
            'is_active': bot['is_active'],
            'start_date': bot['start_date']
        })
    
    for trade in copy_trades:
        all_investments.append({
            'id': trade['id'],
            'type': 'copy',
            'amount': trade['amount'],
            'total_earned': trade['total_profit'] if trade['total_profit'] else 0,
            'is_active': trade['is_active'],
            'start_date': trade['start_date']
        })
    
    for proj in project_investments:
        all_investments.append({
            'id': proj['id'],
            'type': 'project',
            'amount': proj['amount'],
            'total_earned': 0,  # Les projets n'ont pas encore de gains
            'is_active': True,
            'start_date': proj['investment_date']
        })

    return render_template('investment_history.html',
                         roi_investments=roi_investments,
                         staking_investments=staking_investments,
                         trading_bots=trading_bots,
                         copy_trades=copy_trades,
                         project_investments=project_investments,
                         all_investments=all_investments,
                         stats=stats)

@app.route('/projects')
@login_required
def projects():
    conn = get_db_connection()
    projects = conn.execute('''
        SELECT *, 
               (raised_amount * 100.0 / target_amount) as progress_percent
        FROM projects 
        WHERE status = 'collecting' AND deadline > datetime('now')
        ORDER BY created_at DESC
    ''').fetchall()
    conn.close()

    return render_template('projects.html', projects=projects)

@app.route('/project/<int:project_id>')
@login_required
def project_detail(project_id):
    conn = get_db_connection()
    project = conn.execute('''
        SELECT *, 
               (raised_amount * 100.0 / target_amount) as progress_percent
        FROM projects 
        WHERE id = ?
    ''', (project_id,)).fetchone()

    if not project:
        flash('Projet non trouv√©', 'error')
        return redirect(url_for('projects'))

    # Get project investments
    investments = conn.execute('''
        SELECT pi.*, u.first_name, u.last_name
        FROM project_investments pi
        JOIN users u ON pi.user_id = u.id
        WHERE pi.project_id = ?
        ORDER BY pi.investment_date DESC
    ''', (project_id,)).fetchall()

    conn.close()

    return render_template('project_detail.html', project=project, investments=investments)



@app.route('/invest-project', methods=['POST'])
@login_required
def invest_project():
    data = request.get_json()
    project_id = data.get('project_id')
    amount = float(data.get('amount', 0))

    conn = get_db_connection()

    # Get project details
    project = conn.execute('SELECT * FROM projects WHERE id = ?', (project_id,)).fetchone()
    if not project:
        return jsonify({'error': 'Projet non trouv√©'}), 404

    # Check amount limits
    if amount < project['min_investment'] or amount > project['max_investment']:
        return jsonify({'error': f'Montant doit √™tre entre {project["min_investment"]} et {project["max_investment"]} USDT'}), 400

    # Check user balance
    user = conn.execute('SELECT balance FROM users WHERE id = ?', (session['user_id'],)).fetchone()
    if user['balance'] < amount:
        return jsonify({'error': 'Solde insuffisant'}), 400

    # Create investment
    conn.execute('''
        INSERT INTO project_investments (user_id, project_id, amount, transaction_hash)
        VALUES (?, ?, ?, ?)
    ''', (session['user_id'], project_id, amount, generate_transaction_hash()))

    # Update user balance and project raised amount
    conn.execute('UPDATE users SET balance = balance - ? WHERE id = ?', (amount, session['user_id']))
    conn.execute('UPDATE projects SET raised_amount = raised_amount + ? WHERE id = ?', (amount, project_id))

    # Add transaction record
    conn.execute('''
        INSERT INTO transactions (user_id, type, amount, status, transaction_hash)
        VALUES (?, 'project_investment', ?, 'completed', ?)
    ''', (session['user_id'], amount, generate_transaction_hash()))

    conn.commit()
    conn.close()

    return jsonify({'success': True, 'message': 'Investissement dans le projet r√©alis√© avec succ√®s!'})

@app.route('/profile')
@login_required
def profile():
    conn = get_db_connection()
    user = conn.execute('SELECT * FROM users WHERE id = ?', (session['user_id'],)).fetchone()

    # Get referral stats
    referrals = conn.execute('''
        SELECT COUNT(*) as count, COALESCE(SUM(balance), 0) as total_balance
        FROM users 
        WHERE referred_by = ?
    ''', (user['referral_code'],)).fetchone()

    # Get user balance for navbar
    user_balance = user['balance'] if user['balance'] else 0.0

    conn.close()

    return render_template('profile.html', user=user, referrals=referrals, user_balance=user_balance)

@app.route('/staking-plans')
@login_required
def staking_plans():
    conn = get_db_connection()
    plans = conn.execute('SELECT * FROM staking_plans WHERE is_active = 1').fetchall()
    conn.close()

    return render_template('staking_plans.html', plans=plans)

@app.route('/invest-staking', methods=['POST'])
@login_required
def invest_staking():
    data = request.get_json()
    plan_id = data.get('plan_id')
    amount = float(data.get('amount', 0))

    conn = get_db_connection()

    # Get plan details
    plan = conn.execute('SELECT * FROM staking_plans WHERE id = ?', (plan_id,)).fetchone()
    if not plan:
        return jsonify({'error': 'Plan de staking non trouv√©'}), 404

    # Check amount limits
    if amount < plan['min_amount'] or amount > plan['max_amount']:
        return jsonify({'error': f'Montant doit √™tre entre {plan["min_amount"]} et {plan["max_amount"]} USDT'}), 400

    # Check user balance
    user = conn.execute('SELECT balance FROM users WHERE id = ?', (session['user_id'],)).fetchone()
    if user['balance'] < amount:
        return jsonify({'error': 'Solde insuffisant'}), 400

    # Calculate dates
    start_date = datetime.now()
    end_date = start_date + timedelta(days=plan['duration_days'])

    # Create staking
    conn.execute('''
        INSERT INTO user_staking (user_id, plan_id, amount, start_date, end_date, transaction_hash)
        VALUES (?, ?, ?, ?, ?, ?)
    ''', (session['user_id'], plan_id, amount, start_date, end_date, generate_transaction_hash()))

    # Update user balance
    conn.execute('UPDATE users SET balance = balance - ? WHERE id = ?', (amount, session['user_id']))

    conn.commit()
    conn.close()

    return jsonify({'success': True, 'message': 'Staking activ√© avec succ√®s!'})

@app.route('/frozen-plans')
@login_required
def frozen_plans():
    conn = get_db_connection()
    plans = conn.execute('SELECT * FROM frozen_plans WHERE is_active = 1').fetchall()
    conn.close()

    return render_template('frozen_plans.html', plans=plans)

@app.route('/invest-frozen', methods=['POST'])
@login_required
def invest_frozen():
    data = request.get_json()
    plan_id = data.get('plan_id')
    amount = float(data.get('amount', 0))

    conn = get_db_connection()

    # Get plan details
    plan = conn.execute('SELECT * FROM frozen_plans WHERE id = ?', (plan_id,)).fetchone()
    if not plan:
        return jsonify({'error': 'Plan gel√© non trouv√©'}), 404

    # Check amount limits
    if amount < plan['min_amount'] or amount > plan['max_amount']:
        return jsonify({'error': f'Montant doit √™tre entre {plan["min_amount"]} et {plan["max_amount"]} USDT'}), 400

    # Check user balance
    user = conn.execute('SELECT balance FROM users WHERE id = ?', (session['user_id'],)).fetchone()
    if user['balance'] < amount:
        return jsonify({'error': 'Solde insuffisant'}), 400

    # Calculate dates and final amount
    start_date = datetime.now()
    end_date = start_date + timedelta(days=plan['duration_days'])
    final_amount = amount * plan['total_return_rate']

    # Create frozen investment
    conn.execute('''
        INSERT INTO user_frozen_investments (user_id, plan_id, amount, start_date, end_date, final_amount, transaction_hash)
        VALUES (?, ?, ?, ?, ?, ?, ?)
    ''', (session['user_id'], plan_id, amount, start_date, end_date, final_amount, generate_transaction_hash()))

    # Update user balance
    conn.execute('UPDATE users SET balance = balance - ? WHERE id = ?', (amount, session['user_id']))

    conn.commit()
    conn.close()

    return jsonify({'success': True, 'message': 'Investissement gel√© cr√©√© avec succ√®s!'})

@app.route('/portfolio-invest', methods=['POST'])
@login_required
def portfolio_invest():
    data = request.get_json()
    total_amount = float(data.get('total_amount', 0))
    distributions = data.get('distributions', [])

    if not distributions or total_amount <= 0:
        return jsonify({'error': 'Donn√©es de r√©partition invalides'}), 400

    conn = get_db_connection()

    # Check user balance
    user = conn.execute('SELECT balance FROM users WHERE id = ?', (session['user_id'],)).fetchone()
    if user['balance'] < total_amount:
        return jsonify({'error': 'Solde insuffisant'}), 400

    # Process each distribution
    for dist in distributions:
        investment_type = dist.get('type')
        plan_id = dist.get('plan_id')
        amount = float(dist.get('amount', 0))

        if investment_type == 'roi':
            plan = conn.execute('SELECT * FROM roi_plans WHERE id = ?', (plan_id,)).fetchone()
            if plan:
                start_date = datetime.now()
                end_date = start_date + timedelta(days=plan['duration_days'])
                daily_profit = amount * plan['daily_rate']

                conn.execute('''
                    INSERT INTO user_investments (user_id, plan_id, amount, start_date, end_date, daily_profit, transaction_hash)
                    VALUES (?, ?, ?, ?, ?, ?, ?)
                ''', (session['user_id'], plan_id, amount, start_date, end_date, daily_profit, generate_transaction_hash()))

        elif investment_type == 'staking':
            plan = conn.execute('SELECT * FROM staking_plans WHERE id = ?', (plan_id,)).fetchone()
            if plan:
                start_date = datetime.now()
                end_date = start_date + timedelta(days=plan['duration_days'])

                conn.execute('''
                    INSERT INTO user_staking (user_id, plan_id, amount, start_date, end_date, transaction_hash)
                    VALUES (?, ?, ?, ?, ?, ?)
                ''', (session['user_id'], plan_id, amount, start_date, end_date, generate_transaction_hash()))

        elif investment_type == 'project':
            conn.execute('''
                INSERT INTO project_investments (user_id, project_id, amount, transaction_hash)
                VALUES (?, ?, ?, ?)
            ''', (session['user_id'], plan_id, amount, generate_transaction_hash()))

            conn.execute('UPDATE projects SET raised_amount = raised_amount + ? WHERE id = ?', (amount, plan_id))

    # Save portfolio distribution
    conn.execute('''
        INSERT INTO portfolio_distributions (user_id, total_amount, distribution_data)
        VALUES (?, ?, ?)
    ''', (session['user_id'], total_amount, json.dumps(distributions)))

    # Update user balance
    conn.execute('UPDATE users SET balance = balance - ? WHERE id = ?', (total_amount, session['user_id']))

    conn.commit()
    conn.close()

    return jsonify({'success': True, 'message': 'Portfolio diversifi√© cr√©√© avec succ√®s!'})

@app.route('/deposit', methods=['POST'])
@login_required
def submit_deposit():
    """Soumettre une demande de d√©p√¥t"""
    data = request.get_json()
    amount = float(data.get('amount', 0))
    transaction_hash = data.get('transaction_hash', '')

    if not amount or not transaction_hash:
        return jsonify({'error': 'Montant et hash de transaction requis'}), 400

    if amount < 10:
        return jsonify({'error': 'Montant minimum de d√©p√¥t: 10 USDT'}), 400

    conn = get_db_connection()

    # Cr√©er la transaction en attente
    cursor = conn.execute('''
        INSERT INTO transactions (user_id, type, amount, status, transaction_hash)
        VALUES (?, 'deposit', ?, 'pending', ?)
    ''', (session['user_id'], amount, transaction_hash))

    deposit_id = cursor.lastrowid
    conn.commit()
    conn.close()

    # Notification admin pour nouveau d√©p√¥t
    add_notification(
        1,  # ID admin par d√©faut
        'Nouveau d√©p√¥t √† v√©rifier',
        f'Nouvelle demande de d√©p√¥t: {amount} USDT de {session.get("email", "Utilisateur")} - Hash: {transaction_hash[:16]}...',
        'info'
    )

    # Ajouter une notification √† l'utilisateur
    add_notification(
        session['user_id'],
        'D√©p√¥t en cours de v√©rification',
        f'Votre d√©p√¥t de {amount} USDT est en cours de v√©rification par notre √©quipe.',
        'info'
    )

    return jsonify({'success': True, 'message': 'D√©p√¥t soumis pour v√©rification'})

@app.route('/withdraw', methods=['POST'])
@login_required
def submit_withdrawal():
    """Soumettre une demande de retrait"""
    data = request.get_json()
    amount = float(data.get('amount', 0))
    withdrawal_address = data.get('withdrawal_address', '')

    if not amount or not withdrawal_address:
        return jsonify({'error': 'Montant et adresse de retrait requis'}), 400

    if amount < 10:
        return jsonify({'error': 'Montant minimum de retrait: 10 USDT'}), 400

    conn = get_db_connection()

    # V√©rifier le solde utilisateur
    user = conn.execute('SELECT balance FROM users WHERE id = ?', (session['user_id'],)).fetchone()
    if user['balance'] < amount:
        return jsonify({'error': 'Solde insuffisant'}), 400

    # D√©biter temporairement le solde
    conn.execute('UPDATE users SET balance = balance - ? WHERE id = ?', (amount, session['user_id']))

    # Cr√©er la transaction en attente
    cursor = conn.execute('''
        INSERT INTO transactions (user_id, type, amount, status, transaction_hash)
        VALUES (?, 'withdrawal', ?, 'pending', ?)
    ''', (session['user_id'], amount, f"withdrawal_{generate_transaction_hash()[:16]}"))

    withdrawal_id = cursor.lastrowid

    # Stocker l'adresse de retrait
    conn.execute('''
        UPDATE transactions 
        SET transaction_hash = ? 
        WHERE id = ?
    ''', (f"{withdrawal_address}|{amount}", withdrawal_id))

    conn.commit()
    conn.close()

    # Notification admin pour nouveau retrait
    add_notification(
        1,  # ID admin par d√©faut
        'Nouveau retrait √† traiter',
        f'Nouvelle demande de retrait: {amount} USDT de {session.get("email", "Utilisateur")} vers {withdrawal_address[:20]}...',
        'info'
    )

    # Ajouter une notification √† l'utilisateur
    add_notification(
        session['user_id'],
        'Retrait en cours de traitement',
        f'Votre demande de retrait de {amount} USDT est en cours de traitement.',
        'info'
    )

    return jsonify({'success': True, 'message': 'Demande de retrait soumise pour traitement'})

# Support routes
@app.route('/support')
@login_required
def support():
    conn = get_db_connection()

    # Get user's tickets
    tickets = conn.execute('''
        SELECT st.*, 
               (SELECT COUNT(*) FROM support_messages sm WHERE sm.ticket_id = st.id) as message_count,
               (SELECT sm.created_at FROM support_messages sm WHERE sm.ticket_id = st.id ORDER BY sm.created_at DESC LIMIT 1) as last_message_at
        FROM support_tickets st
        WHERE st.user_id = ?
        ORDER BY st.created_at DESC
    ''', (session['user_id'],)).fetchall()

    # Get FAQ
    faq_items = conn.execute('''
        SELECT * FROM faq WHERE is_active = 1 ORDER BY category, id
    ''').fetchall()

    conn.close()

    return render_template('support.html', tickets=tickets, faq_items=faq_items)

@app.route('/support/ticket/<int:ticket_id>')
@login_required
def support_ticket(ticket_id):
    conn = get_db_connection()

    # Get ticket details
    ticket = conn.execute('''
        SELECT st.*, u.first_name, u.last_name, u.email
        FROM support_tickets st
        JOIN users u ON st.user_id = u.id
        WHERE st.id = ? AND st.user_id = ?
    ''', (ticket_id, session['user_id'])).fetchone()

    if not ticket:
        flash('Ticket non trouv√©', 'error')
        return redirect(url_for('support'))

    # Get messages
    messages = conn.execute('''
        SELECT sm.*, u.first_name, u.last_name
        FROM support_messages sm
        LEFT JOIN users u ON sm.user_id = u.id
        WHERE sm.ticket_id = ?
        ORDER BY sm.created_at ASC
    ''', (ticket_id,)).fetchall()

    conn.close()

    return render_template('support_ticket.html', ticket=ticket, messages=messages)

@app.route('/support/create-ticket', methods=['POST'])
@login_required
def create_support_ticket():
    data = request.get_json()
    subject = data.get('subject', '').strip()
    message = data.get('message', '').strip()
    category = data.get('category', 'general')
    priority = data.get('priority', 'normal')

    # Informations suppl√©mentaires optionnelles
    amount = data.get('amount', '')
    tx_hash = data.get('tx_hash', '')

    if not subject or not message:
        return jsonify({'error': 'Sujet et message requis'}), 400

    # Enrichir le message avec les informations suppl√©mentaires
    enriched_message = message
    if amount or tx_hash:
        enriched_message += "\n\n--- Informations suppl√©mentaires ---"
        if amount:
            enriched_message += f"\nüí∞ Montant concern√©: {amount} USDT"
        if tx_hash:
            enriched_message += f"\nüîó Hash de transaction: {tx_hash}"

    conn = get_db_connection()

    try:
        # Create ticket
        cursor = conn.execute('''
            INSERT INTO support_tickets (user_id, subject, category, priority)
            VALUES (?, ?, ?, ?)
        ''', (session['user_id'], subject, category, priority))

        ticket_id = cursor.lastrowid

        # Add first message
        conn.execute('''
            INSERT INTO support_messages (ticket_id, user_id, message, is_admin)
            VALUES (?, ?, ?, 0)
        ''', (ticket_id, session['user_id'], enriched_message))

        conn.commit()

        # Notification utilisateur
        add_notification(
            session['user_id'],
            'Ticket de support cr√©√©',
            f'Votre ticket #{ticket_id} a √©t√© cr√©√© avec succ√®s. Notre √©quipe va vous r√©pondre rapidement.',
            'success'
        )

        # Notification admin
        add_notification(
            1,  # Admin user ID
            'Nouveau ticket de support',
            f'Nouveau ticket #{ticket_id} - {category.upper()} - Priorit√©: {priority}',
            'info'
        )

        # Notifier l'admin via Telegram si disponible


        return jsonify({
            'success': True, 
            'ticket_id': ticket_id,
            'message': f'Ticket #{ticket_id} cr√©√© avec succ√®s!'
        })

    except Exception as e:
        conn.rollback()
        print(f"Erreur cr√©ation ticket: {e}")
        return jsonify({'error': 'Erreur lors de la cr√©ation du ticket'}), 500
    finally:
        conn.close()

@app.route('/support/send-message', methods=['POST'])
@login_required
def send_support_message():
    data = request.get_json()
    ticket_id = data.get('ticket_id')
    message = data.get('message', '').strip()

    if not message:
        return jsonify({'error': 'Message requis'}), 400

    conn = get_db_connection()

    # Verify ticket belongs to user
    ticket = conn.execute('''
        SELECT id FROM support_tickets 
        WHERE id = ? AND user_id = ?
    ''', (ticket_id, session['user_id'])).fetchone()

    if not ticket:
        return jsonify({'error': 'Ticket non trouv√©'}), 404

    # Add message
    conn.execute('''
        INSERT INTO support_messages (ticket_id, user_id, message, is_admin)
        VALUES (?, ?, ?, 0)
    ''', (ticket_id, session['user_id'], message))

    # Update ticket timestamp
    conn.execute('''
        UPDATE support_tickets 
        SET updated_at = CURRENT_TIMESTAMP, status = 'user_reply'
        WHERE id = ?
    ''', (ticket_id,))

    conn.commit()
    conn.close()

    return jsonify({'success': True})

@app.route('/support/get-messages/<int:ticket_id>')
@login_required
def get_support_messages(ticket_id):
    try:
        conn = get_db_connection()

        # Verify ticket belongs to user
        ticket = conn.execute('''
            SELECT id FROM support_tickets 
            WHERE id = ? AND user_id = ?
        ''', (ticket_id, session['user_id'])).fetchone()

        if not ticket:
            conn.close()
            return jsonify({'error': 'Ticket non trouv√©'}), 404

        # Get messages
        messages = conn.execute('''
            SELECT sm.*, u.first_name, u.last_name
            FROM support_messages sm
            LEFT JOIN users u ON sm.user_id = u.id
            WHERE sm.ticket_id = ?
            ORDER BY sm.created_at ASC
        ''', (ticket_id,)).fetchall()

        conn.close()

        messages_list = []
        for msg in messages:
            # G√©rer les valeurs NULL proprement
            first_name = msg['first_name'] if msg['first_name'] else ''
            last_name = msg['last_name'] if msg['last_name'] else ''

            sender_name = 'Support' if msg['is_admin'] else f"{first_name} {last_name}".strip()
            if not sender_name or sender_name.isspace():
                sender_name = 'Utilisateur'

            messages_list.append({
                'id': msg['id'],
                'message': msg['message'] if msg['message'] else '',
                'is_admin': bool(msg['is_admin']),
                'created_at': msg['created_at'] if msg['created_at'] else '',
                'sender_name': sender_name
            })

        return jsonify({
            'success': True,
            'messages': messages_list,
            'ticket_id': ticket_id
        })

    except Exception as e:
        print(f"Erreur get_support_messages: {e}")
        return jsonify({'error': 'Erreur serveur'}), 500

@app.route('/admin')
def admin_panel():
    """Panneau d'administration principal - ACC√àS LIBRE"""
    # Cr√©er une session temporaire admin si elle n'existe pas
    if 'user_id' not in session:
        session['user_id'] = 1  # ID admin temporaire
        session['email'] = 'admin@temp.local'
        session['first_name'] = 'Admin'
        session['is_potential_admin'] = True
        session['is_admin'] = False

    # V√©rifier si l'acc√®s admin est activ√©
    admin_status = get_admin_status()
    if not admin_status['enabled'] or not session.get('is_admin'):
        return redirect(url_for('admin_activation_required'))

    # Acc√®s admin confirm√© - afficher le dashboard admin
    return redirect(url_for('admin_dashboard'))

@app.route('/admin/dashboard')
@admin_required
def admin_dashboard():
    """Dashboard administrateur avec statistiques"""
    conn = get_db_connection()

    # Statistiques g√©n√©rales
    stats = {}
    stats['total_users'] = conn.execute('SELECT COUNT(*) as count FROM users').fetchone()['count']
    stats['total_investments'] = conn.execute('SELECT COALESCE(SUM(amount), 0) as total FROM user_investments').fetchone()['total']
    stats['total_projects'] = conn.execute('SELECT COUNT(*) as count FROM projects').fetchone()['count']
    stats['pending_kyc'] = conn.execute('SELECT COUNT(*) as count FROM users WHERE kyc_status = "pending"').fetchone()['count']

    # Transactions r√©centes
    transactions = conn.execute('''
        SELECT t.*, u.first_name, u.last_name, u.email
        FROM transactions t
        JOIN users u ON t.user_id = u.id
        ORDER BY t.created_at DESC
        LIMIT 10
    ''').fetchall()

    # Tickets de support ouverts
    try:
        stats['open_tickets'] = conn.execute('SELECT COUNT(*) as count FROM support_tickets WHERE status != "closed"').fetchone()['count']
    except:
        stats['open_tickets'] = 0

    conn.close()

    return render_template('admin_dashboard.html', stats=stats, transactions=transactions)

@app.route('/admin-activation-required')
def admin_activation_required():
    """Page d'activation admin requis - ACC√àS LIBRE"""
    # Cr√©er une session temporaire admin si elle n'existe pas
    if 'user_id' not in session:
        session['user_id'] = 1  # ID admin temporaire
        session['email'] = 'admin@temp.local'
        session['first_name'] = 'Admin'
        session['is_potential_admin'] = True
        session['is_admin'] = False

    admin_status = get_admin_status()
    return render_template('admin_activation.html', admin_status=admin_status)

@app.route('/admin/activate', methods=['POST'])
def activate_admin_access():
    """Active l'acc√®s admin avec code de s√©curit√© - ACC√àS LIBRE"""
    # Cr√©er une session temporaire admin si elle n'existe pas
    if 'user_id' not in session:
        session['user_id'] = 1  # ID admin temporaire
        session['email'] = 'admin@temp.local'
        session['first_name'] = 'Admin'
        session['is_potential_admin'] = True
        session['is_admin'] = False

    data = request.get_json()
    activation_code = data.get('activation_code')
    duration = int(data.get('duration', 30))  # Dur√©e en minutes

    # Codes d'activation s√©curis√©s (peuvent √™tre chang√©s p√©riodiquement)
    VALID_CODES = [
        'ADMIN2024!',
        'SECURE_ACCESS_' + datetime.now().strftime('%Y%m%d'),
        'EMERGENCY_' + str(datetime.now().hour * 100 + datetime.now().minute)
    ]

    if activation_code not in VALID_CODES:
        log_security_action(session['user_id'], 'admin_activation_failed', f'Code d\'activation invalide: {activation_code}')
        return jsonify({'error': 'Code d\'activation invalide'}), 401

    # Activer l'acc√®s admin
    enable_admin_access(duration)
    session['is_admin'] = True
    session['admin_activated_at'] = datetime.now().isoformat()

    log_security_action(session['user_id'], 'admin_access_activated', f'Acc√®s admin activ√© pour {duration} minutes')

    return jsonify({
        'success': True, 
        'message': f'Acc√®s admin activ√© pour {duration} minutes',
        'expiry': ADMIN_ACCESS_EXPIRY.isoformat() if ADMIN_ACCESS_EXPIRY else None
    })

@app.route('/admin/deactivate', methods=['POST'])
def deactivate_admin_access():
    """D√©sactive imm√©diatement l'acc√®s admin - ACC√àS LIBRE"""
    # Cr√©er une session temporaire si elle n'existe pas
    if 'user_id' not in session:
        session['user_id'] = 1

    # Permettre la d√©sactivation m√™me si is_admin est False
    # car l'utilisateur peut vouloir d√©sactiver un acc√®s expir√©

    disable_admin_access()
    session['is_admin'] = False

    log_security_action(session['user_id'], 'admin_access_deactivated', 'Acc√®s admin d√©sactiv√© manuellement')

    return jsonify({'success': True, 'message': 'Acc√®s admin d√©sactiv√©'})

@app.route('/admin/status')
def admin_status():
    """Retourne le statut de l'acc√®s admin - ACC√àS LIBRE"""
    # Cr√©er une session temporaire si elle n'existe pas
    if 'user_id' not in session:
        session['user_id'] = 1
        session['is_potential_admin'] = True
        session['is_admin'] = False

    status = get_admin_status()
    return jsonify({
        'is_potential_admin': session.get('is_potential_admin', True),
        'is_admin_active': session.get('is_admin', False),
        'access_enabled': status['enabled'],
        'expiry': status['expiry'].isoformat() if status['expiry'] else None,
        'remaining_minutes': round(status['remaining_minutes'], 1)
    })

# Commande console pour activer admin (pour les d√©veloppeurs)
def admin_console_activate(duration=30):
    """Fonction console pour activer l'acc√®s admin"""
    enable_admin_access(duration)
    return f"Acc√®s admin activ√© pour {duration} minutes"

def admin_console_deactivate():
    """Fonction console pour d√©sactiver l'acc√®s admin"""
    disable_admin_access()
    return "Acc√®s admin d√©sactiv√©"

def admin_console_status():
    """Fonction console pour voir le statut admin"""
    status = get_admin_status()
    if status['enabled']:
        return f"Admin ACTIV√â - Expire dans {status['remaining_minutes']:.1f} minutes ({status['expiry']})"
    else:
        return "Admin D√âSACTIV√â"

def restore_user_investments(user_id, investments_data=None):
    """Restaurer les investissements d'un utilisateur"""
    conn = get_db_connection()
    
    if investments_data is None:
        # Donn√©es d'exemple pour restauration d'urgence
        investments_data = [
            {
                'plan_id': 1, 'amount': 100, 'days_remaining': 25,
                'daily_profit': 3.0, 'total_earned': 15.0
            },
            {
                'plan_id': 5, 'amount': 500, 'days_remaining': 35,
                'daily_profit': 60.0, 'total_earned': 150.0
            }
        ]
    
    try:
        for inv_data in investments_data:
            start_date = datetime.now() - timedelta(days=(30 - inv_data.get('days_remaining', 30)))
            end_date = datetime.now() + timedelta(days=inv_data.get('days_remaining', 30))
            
            conn.execute('''
                INSERT INTO user_investments (user_id, plan_id, amount, start_date, end_date, daily_profit, total_earned, is_active, transaction_hash)
                VALUES (?, ?, ?, ?, ?, ?, ?, 1, ?)
            ''', (
                user_id, 
                inv_data['plan_id'], 
                inv_data['amount'], 
                start_date, 
                end_date, 
                inv_data['daily_profit'], 
                inv_data.get('total_earned', 0),
                generate_transaction_hash()
            ))
        
        conn.commit()
        conn.close()
        
        # Notification
        add_notification(
            user_id,
            'Investissements restaur√©s',
            f'{len(investments_data)} investissement(s) ont √©t√© restaur√©s avec succ√®s.',
            'success'
        )
        
        print(f"‚úÖ {len(investments_data)} investissements restaur√©s pour l'utilisateur {user_id}")
        return True
        
    except Exception as e:
        conn.rollback()
        conn.close()
        print(f"‚ùå Erreur restauration investissements: {e}")
        return False

@app.route('/admin/transactions')
@admin_required
def admin_transactions():
    """Gestion des transactions (d√©p√¥ts/retraits)"""
    conn = get_db_connection()

    # R√©cup√©rer toutes les transactions en attente
    pending_transactions = conn.execute('''
        SELECT t.*, u.first_name, u.last_name, u.email
        FROM transactions t
        JOIN users u ON t.user_id = u.id
        WHERE t.status = 'pending'
        ORDER BY t.created_at DESC
    ''').fetchall()

    conn.close()

    return render_template('admin_transactions.html', transactions=pending_transactions)

@app.route('/restore-from-backup', methods=['POST'])
@login_required
def restore_from_backup():
    """Restaurer manuellement depuis la sauvegarde"""
    try:
        if not REPLIT_DB_AVAILABLE:
            return jsonify({
                'error': 'Sauvegarde Replit non disponible'
            }), 400
        
        success = restore_critical_data()
        
        if success:
            return jsonify({
                'success': True,
                'message': 'Donn√©es restaur√©es depuis la sauvegarde!'
            })
        else:
            return jsonify({
                'error': 'Aucune sauvegarde disponible ou donn√©es d√©j√† pr√©sentes'
            }), 400
            
    except Exception as e:
        return jsonify({
            'error': f'Erreur: {str(e)}'
        }), 500

@app.route('/force-backup', methods=['POST'])
@login_required
def force_backup():
    """Forcer une sauvegarde manuelle"""
    try:
        if not REPLIT_DB_AVAILABLE:
            return jsonify({
                'error': 'Sauvegarde Replit non disponible'
            }), 400
        
        backup_critical_data()
        
        return jsonify({
            'success': True,
            'message': 'Sauvegarde effectu√©e avec succ√®s!'
        })
            
    except Exception as e:
        return jsonify({
            'error': f'Erreur: {str(e)}'
        }), 500


    conn.close()

    return render_template('admin_transactions.html', transactions=pending_transactions)

@app.route('/admin/approve-transaction/<int:transaction_id>', methods=['POST'])
@admin_required
def approve_transaction(transaction_id):
    """Approuver une transaction"""
    try:
        conn = get_db_connection()
        
        # R√©cup√©rer la transaction
        transaction = conn.execute('''
            SELECT t.*, u.email, u.first_name, u.balance
            FROM transactions t
            JOIN users u ON t.user_id = u.id
            WHERE t.id = ? AND t.status = 'pending'
        ''', (transaction_id,)).fetchone()

        if not transaction:
            conn.close()
            return jsonify({'error': 'Transaction non trouv√©e ou d√©j√† trait√©e'}), 404

        # Validation des donn√©es
        if not transaction['amount'] or transaction['amount'] <= 0:
            conn.close()
            return jsonify({'error': 'Montant de transaction invalide'}), 400

        # Traiter selon le type de transaction
        if transaction['type'] == 'deposit':
            # Approuver le d√©p√¥t - cr√©diter le compte
            new_balance = transaction['balance'] + transaction['amount']
            conn.execute('''
                UPDATE users 
                SET balance = ?
                WHERE id = ?
            ''', (new_balance, transaction['user_id']))

            # Message de notification pour d√©p√¥t
            notification_msg = f'Votre d√©p√¥t de {transaction["amount"]:.2f} USDT a √©t√© approuv√© et cr√©dit√© √† votre compte. Nouveau solde: {new_balance:.2f} USDT'
            
        elif transaction['type'] == 'withdrawal':
            # Le montant a d√©j√† √©t√© d√©bit√© lors de la demande
            # Message de notification pour retrait
            notification_msg = f'Votre retrait de {transaction["amount"]:.2f} USDT a √©t√© trait√© avec succ√®s et sera envoy√© √† votre adresse.'
            
        else:
            conn.close()
            return jsonify({'error': 'Type de transaction non support√©'}), 400

        # Marquer la transaction comme compl√©t√©e avec updated_at
        conn.execute('''
            UPDATE transactions 
            SET status = 'completed', updated_at = CURRENT_TIMESTAMP
            WHERE id = ?
        ''', (transaction_id,))

        # Valider toutes les modifications
        conn.commit()
        conn.close()

        # Ajouter notification apr√®s fermeture de la connexion
        add_notification(
            transaction['user_id'],
            f'{transaction["type"].title()} approuv√© ‚úÖ',
            notification_msg,
            'success'
        )

        # Log de s√©curit√©
        log_security_action(
            session.get('user_id', 1), 
            f'{transaction["type"]}_approved', 
            f'{transaction["type"].title()} #{transaction_id} approuv√©: {transaction["amount"]} USDT pour {transaction["email"]}'
        )

        print(f"‚úÖ Transaction #{transaction_id} ({transaction['type']}) approuv√©e avec succ√®s")
        
        return jsonify({
            'success': True, 
            'message': f'{transaction["type"].title()} #{transaction_id} approuv√© avec succ√®s'
        })

    except Exception as e:
        print(f"‚ùå Erreur lors de l'approbation: {e}")
        if 'conn' in locals():
            try:
                conn.rollback()
                conn.close()
            except:
                pass
        
        return jsonify({
            'error': f'Erreur lors de l\'approbation: {str(e)}'
        }), 500

@app.route('/admin/reject-transaction/<int:transaction_id>', methods=['POST'])
@admin_required
def reject_transaction(transaction_id):
    """Rejeter une transaction"""
    data = request.get_json()
    reason = data.get('reason', 'Transaction rejet√©e par l\'administrateur')

    conn = get_db_connection()

    try:
        # R√©cup√©rer la transaction
        transaction = conn.execute('''
            SELECT t.*, u.email, u.first_name
            FROM transactions t
            JOIN users u ON t.user_id = u.id
            WHERE t.id = ?
        ''', (transaction_id,)).fetchone()

        if not transaction:
            return jsonify({'error': 'Transaction non trouv√©e'}), 404

        if transaction['type'] == 'withdrawal':
            # Rembourser le montant au solde utilisateur
            conn.execute('''
                UPDATE users 
                SET balance = balance + ? 
                WHERE id = ?
            ''', (transaction['amount'], transaction['user_id']))

        # Marquer comme rejet√©e
        conn.execute('''
            UPDATE transactions 
            SET status = 'failed' 
            WHERE id = ?
        ''', (transaction_id,))

        # Ajouter notification
        add_notification(
            transaction['user_id'],
            'Transaction rejet√©e',
            f'Votre {transaction["type"]} de {transaction["amount"]} USDT a √©t√© rejet√©e. Raison: {reason}',
            'error'
        )

        conn.commit()

        return jsonify({'success': True, 'message': 'Transaction rejet√©e'})

    except Exception as e:
        conn.rollback()
        return jsonify({'error': f'Erreur: {str(e)}'}), 500
    finally:
        conn.close()

@app.route('/admin/support')
@admin_required
def admin_support():
    """Gestion des tickets de support"""
    conn = get_db_connection()

    try:
        tickets = conn.execute('''
            SELECT st.*, u.first_name, u.last_name, u.email,
                   (SELECT COUNT(*) FROM support_messages sm WHERE sm.ticket_id = st.id) as message_count
            FROM support_tickets st
            JOIN users u ON st.user_id = u.id
            ORDER BY st.created_at DESC
        ''').fetchall()
    except:
        tickets = []

    conn.close()

    return render_template('admin_support.html', tickets=tickets)

@app.route('/admin/support/ticket/<int:ticket_id>')
@admin_required
def admin_support_ticket(ticket_id):
    """Voir les d√©tails d'un ticket de support"""
    conn = get_db_connection()

    # R√©cup√©rer le ticket
    ticket = conn.execute('''
        SELECT st.*, u.first_name, u.last_name, u.email
        FROM support_tickets st
        JOIN users u ON st.user_id = u.id
        WHERE st.id = ?
    ''', (ticket_id,)).fetchone()

    if not ticket:
        flash('Ticket non trouv√©', 'error')
        return redirect(url_for('admin_support'))

    # R√©cup√©rer les messages
    messages = conn.execute('''
        SELECT sm.*, u.first_name, u.last_name
        FROM support_messages sm
        LEFT JOIN users u ON sm.user_id = u.id
        WHERE sm.ticket_id = ?
        ORDER BY sm.created_at ASC
    ''', (ticket_id,)).fetchall()

    conn.close()

    return render_template('admin_support_ticket.html', ticket=ticket, messages=messages)

@app.route('/admin/support/reply', methods=['POST'])
@admin_required
def admin_support_reply():
    """R√©pondre √† un ticket de support"""
    data = request.get_json()
    ticket_id = data.get('ticket_id')
    message = data.get('message', '').strip()

    if not message:
        return jsonify({'error': 'Message requis'}), 400

    conn = get_db_connection()

    try:
        # Ajouter la r√©ponse admin
        conn.execute('''
            INSERT INTO support_messages (ticket_id, message, is_admin)
            VALUES (?, ?, 1)
        ''', (ticket_id, message))

        # Mettre √† jour le statut du ticket
        conn.execute('''
            UPDATE support_tickets 
            SET status = 'admin_reply'
            WHERE id = ?
        ''', (ticket_id,))

        # R√©cup√©rer les infos du ticket pour notification
        ticket = conn.execute('''
            SELECT st.*, u.first_name, u.email
            FROM support_tickets st
            JOIN users u ON st.user_id = u.id
            WHERE st.id = ?
        ''', (ticket_id,)).fetchone()

        conn.commit()

        # Ajouter notification √† l'utilisateur
        if ticket:
            add_notification(
                ticket['user_id'],
                'R√©ponse du support',
                f'Vous avez re√ßu une r√©ponse √† votre ticket #{ticket_id}',
                'info'
            )

        return jsonify({'success': True})

    except Exception as e:
        conn.rollback()
        return jsonify({'error': f'Erreur: {str(e)}'}), 500
    finally:
        conn.close()

@app.route('/admin/support/close/<int:ticket_id>', methods=['POST'])
@admin_required
def admin_close_ticket(ticket_id):
    """Fermer un ticket de support"""
    conn = get_db_connection()

    try:
        # R√©cup√©rer les infos du ticket
        ticket = conn.execute('''
            SELECT user_id, subject FROM support_tickets WHERE id = ?
        ''', (ticket_id,)).fetchone()

        if not ticket:
            return jsonify({'error': 'Ticket non trouv√©'}), 404

        # Fermer le ticket
        conn.execute('''
            UPDATE support_tickets 
            SET status = 'closed'
            WHERE id = ?
        ''', (ticket_id,))

        conn.commit()

        # Notification utilisateur
        add_notification(
            ticket['user_id'],
            'Ticket ferm√©',
            f'Votre ticket #{ticket_id} a √©t√© ferm√© par l\'√©quipe support',
            'info'
        )

        return jsonify({'success': True})

    except Exception as e:
        conn.rollback()
        return jsonify({'error': f'Erreur: {str(e)}'}), 500
    finally:
        conn.close()

@app.route('/admin/calculate-profits', methods=['POST'])
@admin_required
def admin_calculate_profits():
    """D√©clencher manuellement le calcul des profits quotidiens"""
    try:
        calculate_daily_profits()
        return jsonify({
            'success': True, 
            'message': 'Profits quotidiens calcul√©s avec succ√®s!'
        })
    except Exception as e:
        return jsonify({
            'error': f'Erreur lors du calcul des profits: {str(e)}'
        }), 500

@app.route('/calculate-profits-now', methods=['POST'])
@login_required  
def user_calculate_profits():
    """Permettre aux utilisateurs de d√©clencher le calcul des profits"""
    try:
        calculate_daily_profits()
        return jsonify({
            'success': True, 
            'message': 'Vos profits ont √©t√© recalcul√©s!'
        })
    except Exception as e:
        return jsonify({
            'error': f'Erreur lors du calcul des profits: {str(e)}'
        }), 500

@app.route('/restore-investments', methods=['POST'])
@login_required
def restore_investments():
    """Restaurer les investissements perdus d'un utilisateur"""
    try:
        # V√©rifier s'il n'y a vraiment aucun investissement actif
        conn = get_db_connection()
        active_count = conn.execute('''
            SELECT COUNT(*) as count 
            FROM user_investments 
            WHERE user_id = ? AND is_active = 1
        ''', (session['user_id'],)).fetchone()['count']
        
        if active_count > 0:
            conn.close()
            return jsonify({
                'error': 'Vous avez d√©j√† des investissements actifs'
            }), 400
        
        conn.close()
        
        # Restaurer avec des investissements de base
        success = restore_user_investments(session['user_id'])
        
        if success:
            return jsonify({
                'success': True,
                'message': 'Vos investissements ont √©t√© restaur√©s! Rechargez la page pour les voir.'
            })
        else:
            return jsonify({
                'error': 'Erreur lors de la restauration'
            }), 500
            
    except Exception as e:
        return jsonify({
            'error': f'Erreur: {str(e)}'
        }), 500

# Auto-Trading IA Routes
@app.route('/auto-trading')
@login_required
def auto_trading():
    """Page d'auto-trading IA"""
    conn = get_db_connection()
    
    # R√©cup√©rer les strat√©gies de trading
    strategies = conn.execute('''
        SELECT * FROM trading_strategies 
        WHERE is_active = 1
        ORDER BY risk_level, expected_daily_return DESC
    ''').fetchall()
    
    # R√©cup√©rer les bots actifs de l'utilisateur
    user_bots = conn.execute('''
        SELECT utb.*, ts.name as strategy_name, ts.risk_level, ts.expected_daily_return
        FROM user_trading_bots utb
        JOIN trading_strategies ts ON utb.strategy_id = ts.id
        WHERE utb.user_id = ? AND utb.is_active = 1
        ORDER BY utb.start_date DESC
    ''', (session['user_id'],)).fetchall()
    
    conn.close()
    
    return render_template('auto_trading.html', strategies=strategies, user_bots=user_bots)

@app.route('/copy-trading')
@login_required
def copy_trading():
    """Page de copy trading"""
    conn = get_db_connection()
    
    # R√©cup√©rer les top traders
    top_traders = conn.execute('''
        SELECT * FROM top_traders 
        WHERE is_active = 1
        ORDER BY total_return DESC
    ''').fetchall()
    
    # R√©cup√©rer les copy trades actifs de l'utilisateur
    user_copies = conn.execute('''
        SELECT uct.*, tt.name as trader_name, tt.total_return, tt.win_rate, tt.trading_style
        FROM user_copy_trading uct
        JOIN top_traders tt ON uct.trader_id = tt.id
        WHERE uct.user_id = ? AND uct.is_active = 1
        ORDER BY uct.start_date DESC
    ''', (session['user_id'],)).fetchall()
    
    conn.close()
    
    return render_template('copy_trading.html', top_traders=top_traders, user_copies=user_copies)

@app.route('/start-trading-bot', methods=['POST'])
@login_required
def start_trading_bot():
    """D√©marrer un bot de trading IA"""
    data = request.get_json()
    strategy_id = data.get('strategy_id')
    amount = float(data.get('amount', 0))
    
    conn = get_db_connection()
    
    # R√©cup√©rer les d√©tails de la strat√©gie
    strategy = conn.execute('SELECT * FROM trading_strategies WHERE id = ?', (strategy_id,)).fetchone()
    if not strategy:
        conn.close()
        return jsonify({'error': 'Strat√©gie non trouv√©e'}), 404
    
    # V√©rifier les limites de montant
    if amount < strategy['min_amount'] or amount > strategy['max_amount']:
        conn.close()
        return jsonify({'error': f'Montant doit √™tre entre {strategy["min_amount"]} et {strategy["max_amount"]} USDT'}), 400
    
    # V√©rifier le solde utilisateur
    user = conn.execute('SELECT balance FROM users WHERE id = ?', (session['user_id'],)).fetchone()
    if user['balance'] < amount:
        conn.close()
        return jsonify({'error': 'Solde insuffisant'}), 400
    
    # Calculer le profit quotidien estim√©
    daily_profit = amount * strategy['expected_daily_return']
    
    # Cr√©er le bot de trading
    cursor = conn.execute('''
        INSERT INTO user_trading_bots (user_id, strategy_id, amount, daily_profit, transaction_hash)
        VALUES (?, ?, ?, ?, ?)
    ''', (session['user_id'], strategy_id, amount, daily_profit, generate_transaction_hash()))
    
    # Mettre √† jour le solde utilisateur
    conn.execute('UPDATE users SET balance = balance - ? WHERE id = ?', (amount, session['user_id']))
    
    # Ajouter transaction
    conn.execute('''
        INSERT INTO transactions (user_id, type, amount, status, transaction_hash)
        VALUES (?, 'trading_bot', ?, 'completed', ?)
    ''', (session['user_id'], amount, generate_transaction_hash()))
    
    conn.commit()
    conn.close()
    
    # Ajouter notification
    add_notification(
        session['user_id'],
        'Bot de trading activ√©',
        f'Votre bot {strategy["name"]} a √©t√© activ√© avec {amount} USDT!',
        'success'
    )
    
    return jsonify({'success': True, 'message': f'Bot {strategy["name"]} activ√© avec succ√®s!'})

@app.route('/start-copy-trading', methods=['POST'])
@login_required
def start_copy_trading():
    """D√©marrer le copy trading d'un trader"""
    data = request.get_json()
    trader_id = data.get('trader_id')
    amount = float(data.get('amount', 0))
    copy_ratio = float(data.get('copy_ratio', 1.0))
    
    conn = get_db_connection()
    
    # R√©cup√©rer les d√©tails du trader
    trader = conn.execute('SELECT * FROM top_traders WHERE id = ?', (trader_id,)).fetchone()
    if not trader:
        conn.close()
        return jsonify({'error': 'Trader non trouv√©'}), 404
    
    # V√©rifier les limites de montant
    if amount < trader['min_copy_amount'] or amount > trader['max_copy_amount']:
        conn.close()
        return jsonify({'error': f'Montant doit √™tre entre {trader["min_copy_amount"]} et {trader["max_copy_amount"]} USDT'}), 400
    
    # V√©rifier le solde utilisateur
    user = conn.execute('SELECT balance FROM users WHERE id = ?', (session['user_id'],)).fetchone()
    if user['balance'] < amount:
        conn.close()
        return jsonify({'error': 'Solde insuffisant'}), 400
    
    # Cr√©er le copy trading
    cursor = conn.execute('''
        INSERT INTO user_copy_trading (user_id, trader_id, amount, copy_ratio, transaction_hash)
        VALUES (?, ?, ?, ?, ?)
    ''', (session['user_id'], trader_id, amount, copy_ratio, generate_transaction_hash()))
    
    # Mettre √† jour le solde utilisateur
    conn.execute('UPDATE users SET balance = balance - ? WHERE id = ?', (amount, session['user_id']))
    
    # Mettre √† jour le nombre de followers du trader
    conn.execute('UPDATE top_traders SET followers_count = followers_count + 1 WHERE id = ?', (trader_id,))
    
    # Ajouter transaction
    conn.execute('''
        INSERT INTO transactions (user_id, type, amount, status, transaction_hash)
        VALUES (?, 'copy_trading', ?, 'completed', ?)
    ''', (session['user_id'], amount, generate_transaction_hash()))
    
    conn.commit()
    conn.close()
    
    # Ajouter notification
    add_notification(
        session['user_id'],
        'Copy Trading activ√©',
        f'Vous copiez maintenant {trader["name"]} avec {amount} USDT!',
        'success'
    )
    
    return jsonify({'success': True, 'message': f'Copy trading de {trader["name"]} activ√© avec succ√®s!'})

@app.route('/stop-trading-bot/<int:bot_id>', methods=['POST'])
@login_required
def stop_trading_bot(bot_id):
    """Arr√™ter un bot de trading"""
    conn = get_db_connection()
    
    # R√©cup√©rer et v√©rifier le bot
    bot = conn.execute('''
        SELECT * FROM user_trading_bots 
        WHERE id = ? AND user_id = ? AND is_active = 1
    ''', (bot_id, session['user_id'])).fetchone()
    
    if not bot:
        conn.close()
        return jsonify({'error': 'Bot non trouv√© ou d√©j√† arr√™t√©'}), 404
    
    # Arr√™ter le bot
    conn.execute('''
        UPDATE user_trading_bots 
        SET is_active = 0, end_date = CURRENT_TIMESTAMP 
        WHERE id = ?
    ''', (bot_id,))
    
    # Rembourser le capital + profits
    total_amount = bot['amount'] + bot['total_profit']
    conn.execute('UPDATE users SET balance = balance + ? WHERE id = ?', (total_amount, session['user_id']))
    
    conn.commit()
    conn.close()
    
    add_notification(
        session['user_id'],
        'Bot de trading arr√™t√©',
        f'Votre bot a √©t√© arr√™t√©. Capital + profits: {total_amount:.2f} USDT rembours√©s.',
        'info'
    )
    
    return jsonify({'success': True, 'message': 'Bot arr√™t√© avec succ√®s!'})

@app.route('/stop-copy-trading/<int:copy_id>', methods=['POST'])
@login_required
def stop_copy_trading(copy_id):
    """Arr√™ter le copy trading"""
    conn = get_db_connection()
    
    # R√©cup√©rer et v√©rifier le copy trade
    copy_trade = conn.execute('''
        SELECT * FROM user_copy_trading 
        WHERE id = ? AND user_id = ? AND is_active = 1
    ''', (copy_id, session['user_id'])).fetchone()
    
    if not copy_trade:
        conn.close()
        return jsonify({'error': 'Copy trading non trouv√© ou d√©j√† arr√™t√©'}), 404
    
    # Arr√™ter le copy trading
    conn.execute('''
        UPDATE user_copy_trading 
        SET is_active = 0, end_date = CURRENT_TIMESTAMP 
        WHERE id = ?
    ''', (copy_id,))
    
    # Rembourser le capital + profits
    total_amount = copy_trade['amount'] + copy_trade['total_profit']
    conn.execute('UPDATE users SET balance = balance + ? WHERE id = ?', (total_amount, session['user_id']))
    
    # R√©duire le nombre de followers du trader
    conn.execute('UPDATE top_traders SET followers_count = followers_count - 1 WHERE id = ?', (copy_trade['trader_id'],))
    
    conn.commit()
    conn.close()
    
    add_notification(
        session['user_id'],
        'Copy Trading arr√™t√©',
        f'Copy trading arr√™t√©. Capital + profits: {total_amount:.2f} USDT rembours√©s.',
        'info'
    )
    
    return jsonify({'success': True, 'message': 'Copy trading arr√™t√© avec succ√®s!'})

# Security Routes
@app.route('/security')
@login_required
def security_settings():
    """Page des param√®tres de s√©curit√©"""
    conn = get_db_connection()
    user = conn.execute('SELECT * FROM users WHERE id = ?', (session['user_id'],)).fetchone()

    # Cr√©er la table security_logs si elle n'existe pas
    try:
        conn.execute('''
            CREATE TABLE IF NOT EXISTS security_logs (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                action TEXT NOT NULL,
                details TEXT,
                ip_address TEXT,
                user_agent TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (id)
            )
        ''')
        conn.commit()
    except Exception as e:
        print(f"Erreur cr√©ation table security_logs: {e}")

    # R√©cup√©rer les logs de s√©curit√© r√©cents
    try:
        security_logs = conn.execute('''
            SELECT * FROM security_logs 
            WHERE user_id = ? 
            ORDER BY created_at DESC 
            LIMIT 10
        ''', (session['user_id'],)).fetchall()
    except Exception as e:
        print(f"Erreur r√©cup√©ration logs: {e}")
        security_logs = []

    conn.close()

    return render_template('security.html', user=user, security_logs=security_logs)

@app.route('/change-password', methods=['POST'])
@login_required
def change_password():
    """Changer le mot de passe"""
    data = request.get_json()
    current_password = data.get('current_password')
    new_password = data.get('new_password')
    confirm_password = data.get('confirm_password')

    if not all([current_password, new_password, confirm_password]):
        return jsonify({'error': 'Tous les champs sont requis'}), 400

    if new_password != confirm_password:
        return jsonify({'error': 'Les nouveaux mots de passe ne correspondent pas'}), 400

    if len(new_password) < 8:
        return jsonify({'error': 'Le mot de passe doit contenir au moins 8 caract√®res'}), 400

    conn = get_db_connection()
    user = conn.execute('SELECT * FROM users WHERE id = ?', (session['user_id'],)).fetchone()

    # V√©rifier l'ancien mot de passe
    if not check_password_hash(user['password_hash'], current_password):
        conn.close()
        return jsonify({'error': 'Mot de passe actuel incorrect'}), 401

    # Mettre √† jour le mot de passe
    new_password_hash = generate_password_hash(new_password)
    conn.execute('''
        UPDATE users 
        SET password_hash = ? 
        WHERE id = ?
    ''', (new_password_hash, session['user_id']))

    # Enregistrer dans les logs de s√©curit√©
    log_security_action(session['user_id'], 'password_changed', 'Mot de passe modifi√© avec succ√®s')

    conn.commit()
    conn.close()

    # Ajouter notification
    add_notification(
        session['user_id'],
        'Mot de passe modifi√©',
        'Votre mot de passe a √©t√© modifi√© avec succ√®s.',
        'success'
    )

    return jsonify({'success': True, 'message': 'Mot de passe modifi√© avec succ√®s'})

@app.route('/enable-2fa', methods=['POST'])
@login_required
def enable_2fa():
    """Activer l'authentification 2FA"""
    import pyotp
    import qrcode
    import io
    import base64

    try:
        conn = get_db_connection()
        user = conn.execute('SELECT * FROM users WHERE id = ?', (session['user_id'],)).fetchone()

        if user['two_fa_enabled']:
            return jsonify({'error': '2FA d√©j√† activ√©'}), 400

        # G√©n√©rer une cl√© secr√®te pour l'utilisateur
        secret = pyotp.random_base32()

        # Cr√©er l'URI pour le QR code
        totp_uri = pyotp.totp.TOTP(secret).provisioning_uri(
            user['email'], 
            issuer_name="Ttrust"
        )

        # G√©n√©rer le QR code
        qr = qrcode.QRCode(version=1, box_size=10, border=5)
        qr.add_data(totp_uri)
        qr.make(fit=True)

        img = qr.make_image(fill_color="black", back_color="white")

        # Convertir en base64
        buffer = io.BytesIO()
        img.save(buffer, format='PNG')
        qr_code_b64 = base64.b64encode(buffer.getvalue()).decode()

        # Stocker temporairement la cl√© secr√®te
        conn.execute('''
            UPDATE users 
            SET two_fa_secret = ? 
            WHERE id = ?
        ''', (secret, session['user_id']))

        conn.commit()
        conn.close()

        return jsonify({
            'success': True,
            'secret': secret,
            'qr_code': f"data:image/png;base64,{qr_code_b64}",
            'manual_entry_key': secret
        })

    except ImportError:
        return jsonify({'error': 'Modules 2FA non disponibles. Installez pyotp et qrcode'}), 500
    except Exception as e:
        return jsonify({'error': f'Erreur lors de l\'activation 2FA: {str(e)}'}), 500

@app.route('/verify-2fa', methods=['POST'])
@login_required
def verify_2fa():
    """V√©rifier et finaliser l'activation 2FA"""
    import pyotp

    try:
        data = request.get_json()
        token = data.get('token')

        if not token:
            return jsonify({'error': 'Code de v√©rification requis'}), 400

        conn = get_db_connection()
        user = conn.execute('SELECT * FROM users WHERE id = ?', (session['user_id'],)).fetchone()

        if not user['two_fa_secret']:
            return jsonify({'error': 'Processus 2FA non initi√©'}), 400

        # V√©rifier le token
        totp = pyotp.TOTP(user['two_fa_secret'])
        if not totp.verify(token, valid_window=1):
            return jsonify({'error': 'Code de v√©rification invalide'}), 400

        # Activer 2FA
        conn.execute('''
            UPDATE users 
            SET two_fa_enabled = 1 
            WHERE id = ?
        ''', (session['user_id'],))

        # Enregistrer dans les logs
        log_security_action(session['user_id'], '2fa_enabled', 'Authentification 2FA activ√©e')

        conn.commit()
        conn.close()

        # Ajouter notification
        add_notification(
            session['user_id'],
            'Authentification 2FA activ√©e',
            'Votre authentification √† deux facteurs a √©t√© activ√©e avec succ√®s.',
            'success'
        )

        return jsonify({'success': True, 'message': 'Authentification 2FA activ√©e avec succ√®s'})

    except ImportError:
        return jsonify({'error': 'Modules 2FA non disponibles'}), 500
    except Exception as e:
        return jsonify({'error': f'Erreur lors de la v√©rification: {str(e)}'}), 500

@app.route('/disable-2fa', methods=['POST'])
@login_required
def disable_2fa():
    """D√©sactiver l'authentification 2FA"""
    data = request.get_json()
    password = data.get('password')

    if not password:
        return jsonify({'error': 'Mot de passe requis pour d√©sactiver 2FA'}), 400

    conn = get_db_connection()
    user = conn.execute('SELECT * FROM users WHERE id = ?', (session['user_id'],)).fetchone()

    # V√©rifier le mot de passe
    if not check_password_hash(user['password_hash'], password):
        conn.close()
        return jsonify({'error': 'Mot de passe incorrect'}), 401

    # D√©sactiver 2FA
    conn.execute('''
        UPDATE users 
        SET two_fa_enabled = 0, two_fa_secret = NULL 
        WHERE id = ?
    ''', (session['user_id'],))

    # Enregistrer dans les logs
    log_security_action(session['user_id'], '2fa_disabled', 'Authentification 2FA d√©sactiv√©e')

    conn.commit()
    conn.close()

    # Ajouter notification
    add_notification(
        session['user_id'],
        'Authentification 2FA d√©sactiv√©e',
        'Votre authentification √† deux facteurs a √©t√© d√©sactiv√©e.',
        'warning'
    )

    return jsonify({'success': True, 'message': 'Authentification 2FA d√©sactiv√©e'})

def update_admin_password(email, new_password):
    """Mettre √† jour le mot de passe d'un administrateur existant"""
    try:
        conn = get_db_connection()

        # V√©rifier si l'admin existe
        existing_admin = conn.execute('SELECT id FROM users WHERE email = ?', (email,)).fetchone()
        if existing_admin:
            password_hash = generate_password_hash(new_password)
            conn.execute('UPDATE users SET password_hash = ? WHERE email = ?', (password_hash, email))
            conn.commit()
            conn.close()
            print(f"‚úÖ Mot de passe mis √† jour pour {email}")
            return True
        else:
            print(f"‚ùå Administrateur {email} non trouv√©")
            conn.close()
            return False

    except Exception as e:
        print(f"‚ùå Erreur mise √† jour mot de passe: {e}")
        return False

def create_secure_admin(email, password, first_name="Admin", last_name="System"):
    """Cr√©er un compte administrateur s√©curis√©"""
    try:
        conn = get_db_connection()

        # V√©rifier si l'admin existe d√©j√†
        existing_admin = conn.execute('SELECT id FROM users WHERE email = ?', (email,)).fetchone()
        if existing_admin:
            print(f"‚ö†Ô∏è Administrateur {email} existe d√©j√†")
            # Mettre √† jour le mot de passe si diff√©rent
            update_admin_password(email, password)
            conn.close()
            return False

        # Cr√©er le compte admin
        password_hash = generate_password_hash(password)
        referral_code = generate_referral_code()

        cursor = conn.execute('''
            INSERT INTO users (email, password_hash, first_name, last_name, referral_code, kyc_status, balance)
            VALUES (?, ?, ?, ?, ?, 'verified', 0.0)
        ''', (email, password_hash, first_name, last_name, referral_code))

        admin_id = cursor.lastrowid
        conn.commit()
        conn.close()

        print(f"‚úÖ Administrateur {email} cr√©√© avec succ√®s (ID: {admin_id})")
        return True

    except Exception as e:
        print(f"‚ùå Erreur cr√©ation admin: {e}")
        return False

def log_security_action(user_id, action, details=""):
    """Enregistrer une action de s√©curit√©"""
    try:
        conn = get_db_connection()

        # Cr√©er table de logs de s√©curit√© si elle n'existe pas
        conn.execute('''
            CREATE TABLE IF NOT EXISTS security_logs (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                action TEXT NOT NULL,
                details TEXT,
                ip_address TEXT,
                user_agent TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (id)
            )
        ''')

        # R√©cup√©rer l'IP et User-Agent depuis Flask si disponible
        ip_address = None
        user_agent = None
        try:
            from flask import request
            ip_address = request.remote_addr
            user_agent = request.headers.get('User-Agent', '')
        except:
            pass

        conn.execute('''
            INSERT INTO security_logs (user_id, action, details, ip_address, user_agent)
            VALUES (?, ?, ?, ?, ?)
        ''', (user_id, action, details, ip_address, user_agent))

        conn.commit()
        conn.close()

    except Exception as e:
        print(f"‚ùå Erreur log s√©curit√©: {e}")

if __name__ == '__main__':
    # Initialize database with retry logic
    max_init_retries = 3
    for init_attempt in range(max_init_retries):
        try:
            init_db()
            print("‚úÖ Base de donn√©es initialis√©e avec succ√®s")
            
            # Tenter de restaurer les donn√©es depuis la sauvegarde
            if REPLIT_DB_AVAILABLE:
                restore_critical_data()
            
            break
        except sqlite3.OperationalError as e:
            if "database is locked" in str(e) and init_attempt < max_init_retries - 1:
                print(f"‚ö†Ô∏è Base de donn√©es verrouill√©e, tentative {init_attempt + 1}/{max_init_retries}")
                import time
                time.sleep(2)
                continue
            else:
                print(f"‚ùå Erreur initialisation DB: {e}")
                break
        except Exception as e:
            print(f"‚ùå Erreur inattendue initialisation: {e}")
            break

    # Cr√©er les comptes administrateur s√©curis√©s
    print("üîê Initialisation des comptes administrateur...")
    create_secure_admin('admin@ttrust.com', 'AdminSecure2024!', 'Admin', 'Principal')
    create_secure_admin('support@ttrust.com', 'SupportSecure2024!', 'Support', 'Team')
    create_secure_admin('security@ttrust.com', 'SecuritySecure2024!', 'Security', 'Team')
    create_secure_admin('a@gmail.com', 'aaaaaa', 'Admin', 'User')

    # Mettre √† jour le mot de passe du compte a@gmail.com
    update_admin_password('a@gmail.com', 'aaaaaa')

    # Setup scheduler for daily profit calculation and backup
    # D√©sactiver le scheduler sur Render pour √©viter les erreurs
    if not os.environ.get('DISABLE_SCHEDULER'):
        scheduler = BackgroundScheduler()
        scheduler.add_job(
            func=calculate_daily_profits,
            trigger="cron",
            hour=0,
            minute=0,
            id='daily_profits'
        )
        
        # Sauvegarde p√©riodique toutes les 30 minutes si Replit DB disponible
        if REPLIT_DB_AVAILABLE:
            scheduler.add_job(
                func=backup_critical_data,
                trigger="interval",
                minutes=30,
                id='backup_data'
            )
        
        scheduler.start()

        # Shutdown scheduler when exiting the app
        atexit.register(lambda: scheduler.shutdown())
    else:
        print("‚ö†Ô∏è Scheduler d√©sactiv√© pour Render")

    # Configuration pour Render
    port = int(os.environ.get('PORT', 5000))
    debug = os.environ.get('FLASK_ENV') != 'production'
    
    app.run(host='0.0.0.0', port=port, debug=debug)